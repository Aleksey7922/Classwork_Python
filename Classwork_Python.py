# name = "admin"
#
# print("Hello", name)
# age = 20
# # age = 20.2
# print(age)
# print(type(name))
# print(type(age))
# a = 4
# b = 5
# print(a, id(a))


# print(b, id(b))
# a = b
# print(a, id(a))
# print(b, id(b))

#
# a = b = c = 5
# print(a, b, c)
# a, b, c = 7, "Hello", 9.2
# print(a, b, c)

# PI = 3, 14
# print(PI)
# PI = 2  # нарушение соглашения
# print(PI)

# a = 5
# print(a)
# a = "hello"
# print(a)

# a = 5
# b = "7"
# print(a + int(b))
# print(str(a) + b)

# a = 1
# b = 2
# print("a:", a)
# print("b:", b)
#
# a, b = b, a
#
# # c = a  # 1
# # a = b  # 2
# # b = c  # 1
#
# print("a:", a) # 2
# print("b:", b) # 1

# print("строка \n" # перенос строки
#       " символов")
# print('строка символов строка символов строка символов строка символов строка символов строка символов
# строка символов \
#        строка символов')
# print("\"program\" \r\nC:\\folder\\file.txt")

# s1 = "Hello"
# s2 = "Python"
# s3 = s1+ " " + s2 + "___"
# print(s3)
# print(s3 * 3)

# print(34554058409904350948530499)
# print(3.4554058409904350948530499)

# print(6 + 2)
# print(6 - 2)
# print(6 * 2)
# print(6 / 2)
# print(5 / 2)
# print(5 // 2)
# print(6 // 2)
# print(6 ** 2)
# print(6 % 2)

#
# a = 5
# b = 7
# c = 3
# sum1 = a + b + c
# print("Сумма: ",sum1)
# print("Произведение: ", a * b * c)
# print("Среднее арифметическое: ", sum1 / 3)

# numbers = 6 + 4 * 5 ** 2 + 7
# print(numbers)
#
# numbers = (6 + 4) * (5 ** 2 + 7)
# print(numbers)

# num = 10
# num += 5
# print(num)

# import keyword
# keyword.kwlist  - вызов списка ключевых слов в консоли

# ['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif',
# 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or',
# 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']


# -------------------------- УРОК № 2 ---------------------------------------

# # вывести число в обратной последовательности
# num = 4321
# a = num % 10
# print(a)  # 1
# num = num // 10  # 432
# # print("num:", num)
# b = num % 10
# print(b)  # 2
# num = num // 10  # 43
# # print("num:", num)
# c = num % 10
# print(c)  # 3
# num = num // 10  # 4
# # print("num:", num)
# d = num % 10
# print(d)  # 4
# num = a * 1000 + b * 100 + c * 10 + d
# print(num)

# # вывести число в обратной последовательности
# num = 4321  # 1234
# res = num % 10 * 1000  # 1000
# num //= 10  # 432
# res += num % 10 * 100  # 200
# num //= 10  # 43
# res += num % 10 * 10  # 30
# num //= 10  # 4
# res += num % 10  # 4
# print(res)


# print(int(3.8)) # 3
# # a = 3.8
# a = round(3.8975897, 2)  # после запятой можно указать кол -во символов после точки
# print(round(3.8)) # 4  round () - функция математического округления
# print(a, type(a))   #  type(a) - узнать тип данных переменной


# a = "5.2"
# b = 10
# c = int(a) + b   # int(a) - функция  явного преобразования типов
# print(c)


# name = "Виктор"
# age = 28
# print("Меня зовут", name, " . мне", age, "лет.")   # запятая добавляет пробел
# print("Меня зовут" + name + ". мне" + str(age) + " лет.")    # str(age) - преобразование числа в строку
# print("Меня зовут", name, " . мне", age, "лет.", sep="---", end=" \n\n") # sep="" - удаляет, или добавляет символы
# в print    ///  end="\n\n" - показывает, чем заканчивается текущая строка в print
# print("Hello")


# name = input("Введите имя: ")
# city = input("Введите город: ")
# print(name, city)

# num = int(input("введите число: "))
# power = int(input("введите степень: "))
# num = int(num)
# power = int(power)
# res = num ** power
# print("число", num, "в степени", power, "равно: ", res)


# a = int(input("Введите первое число: "))
# b = int(input("Введите второе число: "))
# c = int(input("Введите третье число: "))
# d = int(input("Введите четвертое число: "))
# print("1:", a)
# print("2:", b)
# print("3:", c)
# print("4:", d)
# result = round(((a + b)/(c + d)), 2)
# print(result)


# num1=float(input("Введите 1 число: "))
# num2=float(input("Введите 2 число: "))
# num3=float(input("Введите 3 число: "))
# num4=float(input("Введите 4 число: "))
# res=round((num1+num2)/(num3+num4),2)
# print("Результат: ",res)


# b1 = True
# b2 = False
# print(b1 + 5)
# print(b2 + 5)
# print(type(b1))

# False =>"",  0 , 0,0,  None

# print(bool("python"))
# print(bool(""))
# print(bool(10))
# print(bool(0.0))
# print(bool(False))
# print(bool(None))
#
# test = None
# print(test, type(test))
# test = 5
# print(test)


# print(7 == 7)
# print(7 == "7")
# print(2 + 5 == 7)
# print(2 + 5 != 7)
# print("привет" > "ПРИВЕТ")

# print(2 < 4 < 9)  # True :  True => True
# print(2 < 4 > 9)  # True : False => False
# print(2 * 5 > 7 >= 4 + 3)  # True
# print(3 * 3 <= 7 >= 2)  # False


# a = 10
# b = 5
# c = a == b
# print(a, b, c)

# print(5 - 3 == 2 and 1 + 3 == 4) # true and true => true and - логическое "и"
# print(5 - 3 == 2 or 1 + 3 == 4)   # false and false => false or - логическое "или"
# print(not 9 - 5)  # false not - логическое "нет" (инвертирует на противоположное значение)
# print(not 9 - 9)  # true


# cnt = 15
# if cnt < 10:
#     cnt += 1
# print(cnt)

# age = int(input("введите свой возраст: "))
# if age >= 18:
#     print("доступ на сайт разрешен")
# else:
#     print("доступ запрещен")

# PEP20
# import this

# a = 35
# b = 25
# if a > b:
#     print("a > b")
# elif b > a:
#     print("b > a")
# else:
#     print("a == b")


# определить, какой треугольник, по введенным сторонам

# a = input("введите первую сторону: ")
# b = input("введите вторую  сторону: ")
# c = input("введите третью сторону: ")
# if a == b == c:
#     print("треугольник равносторонний ")
# elif not a == c and not c == b and not b == a:
#     print("треугольник разносторонний")
# elif a == b or b == c or c == a:
#     print("треугольник равнобедренный")


# определить день недели

# day = int(input("Введите день недели (цифрой):"))
# if 1 <= day <= 5:  # (day >=1) and (day <= 5)
#     print("Рабочий день - ", end="")
#     if day == 1:
#         print("понедельник")
#     if day == 2:
#         print("вторник")
#     if day == 3:
#         print("среда")
#     if day == 4:
#         print("четверг")
#     if day == 5:
#         print("пятница")
# elif day == 6 or day == 7:
#     print("Выходной день - ", end="")
#     if day == 6:
#         print("суббота")
#     if day == 7:
#         print("воскресенье")
# else:
#     print("Такого дня недели не существует!")


# n = int(input("Введите количество ворон: "))
# if 0 <= n <=9:
#     print("На ветке", end=" ")
#     if n == 1:
#         print(n, "ворона")
#     elif 2 <= n <= 4:
#         print(n, "вороны")
#     elif 5 <= n <= 9 or n == 0:
#         print(n, "ворон")
#     # else:
#     #     print(n, "ворон")4
# else:
#     print("Ошибка ввода данных")


# ------------------ урок № 3 -------------------------

# m = int(input("введите номер месяца: "))
# if m == 1 or m == 2 or m == 12:
#     print("зима")
# elif 3 <= m <= 5:
#     print("весна")
# elif 6 <= m <= 8:
#     print("лето")
# elif 9 <= m <= 11:
#     print("осень")
# else:
#     print("ошибка ввода данных")


# password = "admin"
#
# match password:
#     case 'admin':
#         print("Администратор")
#     case 'user':
#         print("Пользователь")
#     case _:
#         print("Пароль неверен")


# match - (работает как swith в других языках)------------------

# day = 'понедельник'
#
# match day:
#     case 'понедельник' | 'вторник' | 'среда' | 'четверг' | 'пятница':
#         print("Рабочий день")
#     case 'суббота' | 'воскресенье':
#         print("Выходной день")
#     case _:
#         print("Такого дня недели не существует")


# day = 'понедельник'
# time = 15
#
#
# match day:
#     case 'понедельник' | 'вторник' | 'среда' | 'четверг' | 'пятница' if 9 <= time <= 16:
#         print("Рабочий день")
#     case 'суббота' | 'воскресенье' if 9 <= time <= 12:
#         print("Выходной день")
#     case 'суббота' | 'воскресенье':
#         print("Выходной день")
#     case _:
#         print("Такого дня недели не существует или не рабочее время")


# Тернарное выражение -----------------------------------

# a, b = 30, 20
# minim = a if a < b else b
# print(minim)

# a, b = 10, 20
# print("a==b" if a == b else ("a > b" if a > b else "b > a"))

# a, b = int(input("Введите первое число ")), int(input("Введите второе число "))
# print("На ноль делить нельзя!" if b == 0 else a / b)


# ------------------ исключения ошибок -------------------------------------------------------

# try:
#     n = int(input("Введите целое число: "))
#     print(n * 2)
# except ValueError:
#     print("Что-то пошло не так")


# try:
#     n = int(input("Введите делимое: "))
#     m = int(input("Введите делитель: "))
#     print(n / m)
# except ValueError:
#     print("Нельзя вводить строки ")
# except ZeroDivisionError:
#     print("Нельзя делить на ноль")


# try:
#     n = int(input("Введите делимое: "))
#     m = int(input("Введите делитель: "))
#     print(n / m)
# except (ValueError, ZeroDivisionError):
#     print("Нельзя делить на ноль, нельзя вводить строки")
# else:    # else отработает когда в блоке try не возникло исключений
#     print("Все нормально. Вы ввели числа", n, "и", m)
# finally:   # отработает в любом случае
#     print("Конец программы")


# n = input("Введите первое число: ")
# m = input("Введите второе число: ")
# try:
#     print(int(n) + int(m))
# except ValueError:
#     print(n + m)


# n = input("Введите первое число: ")
# m = input("Введите второе число: ")
# try:
#     n = int(n)
#     m = int(m)
# except ValueError:
#     n = str(n)
# finally:
#     print(n + m)

# исключения обрабатываются когда выбрасывает ошибку


# ЦИКЛ (While и for)----------------------
#
# i = 0
# while i < 5:
#     print("i =", i)
#     i += 1  # i = i + 1


# i = 10
# while i > 0:
#     print("i =", i)
#     i -= 2


# i = 2
# while i <= 20:
#     print("i =", i)
#     i += 2

# i = 1
# while i <= 20:
#     if i % 2 == 0:
#         print("i =", i)
#     i += 1


# n = int(input("Укажите количество символов: "))
# print("*" * n)
# print("+-" * int(n / 2))


# n = int(input("Укажите кол-во символов: "))
# i = 0
# while i < n:
#     if i % 2 == 0:
#         print("+", end="")
#     else:
#         print("-", end="")
#     i += 1


# n = int(input("Укажите кол-во символов: "))
# while n > 0:
#     print("*", end="")
#     n -= 1


# a = int(input("Введите начало диапазона: "))
# b = int(input("Введите конец диапазона: "))
# res = 0
# if a > b:
#     a, b = b, a
# while a <= b:
#     if a % 2:
#         res += a
#     a += 1
# print("Сумма целых нечетных чисел:", res)


# проверка числа на четность

# n = input("Введите целое число: ")
# while type(n) != int:  # проверка переменной n на тип данных (n НЕ int)
#     try:
#         n = int(n)  # явное преобразование в int
#     except ValueError:  # исключение ввода некорректного значения (не целого числа)
#         print("Число не целое!")
#         n = input("Введите целое число: ")
#
# if n % 2 == 0:
#     print("Четное")
# else:
#     print("Нечетное")


# i = 0
# while i < 10:
#     if i == 3:
#         i += 1
#         continue
#     print(i, end=" ")
#     if i == 5:
#         break  # break - остановка цикла
#     i += 1
# print("\nЦикл завершен")


# i = 0
# while True:
#     print(i)
#     if i == 5:
#         break
#     i += 1

# while True:
#     n = int(input("Введите положительное число: "))
#     if n < 0:
#         break


# res = 1
# while True:
#     n = int(input("Введите число: "))
#     if n == 0:
#         break
#     res *= n
# print("результат: ", res)


# i = 0
# while i < 10:
#     if i == 5:
#         break
#     print(i)
#     i += 1
# else:
#     print("Цикл окончен, i =", i)

# Обычный цикл---------------------------
# i = 1
# while i < 5:
#     print("Внешний цикл: i =", i)
#     i += 1

# Вложенный цикл (при одной итерации наружного цикла, выполняются все итерации внутреннего цикла)
# i = 1
# while i < 5:
#     print("Внешний цикл: i =", i)
#     j = 1
#     while j < 4:
#         print("\t Внутренний цикл: j =", j)
#         j += 1
#     i += 1

# ------------урок № 4-----------------------------------------------------------------

# таблица умножения
# i = 1
# while i < 10:
#     j = 1
#     while j < 10:
#         print(i, "*", j, "=", i * j, end="\t\t")
#         j += 1
#     print()
#     i += 1


# Вывод на экран прямоугольника из символов
# i = 0
# while i < 3:
#     j = 0
#     while j < 6:
#         print("^", end="")
#         j += 1
#     print()
#     i += 1

# Вывод на экран прямоугольника из чередующихся символов
# i = 0
# while i < 5:
#     j = 0
#     while j < 16:
#         if i % 2 == 0:
#             print("+", end="")
#         else:
#             print("-",end="")
#         j += 1
#     print()
#     i += 1

# Вывод на экран прямоугольника из чередующихся символов
# i = 0
# while i < 5:
#     j = 0
#     while j < 16:
#         if j % 2 == 0:
#             print("+", end="")
#         else:
#             print("-",end="")
#         j += 1
#     print()
#     i += 1

# вывести диагональ из звездочек
# j = 1
# while j < 6:
#     print(" " * j, "*",sep="")
#     j += 1


# i = 0
# while i < 5:
#     j = 0
#     while j < i:
#         print(" ", end="")
#         j += 1
#     print("*")
#     i += 1

# --------------------Цикл for--------------------------

# for element in collection:
#     print(element)

# for i in "Hello":
#     print(i)
#
# for color in "red", "yellow", "green", 1, 20, 0.3:
#     print(color)

# print(range(2, 5, 2))

# range(start, stop, step) то же самое что и (i=0; i<=x; i++) функция для for, принимает только три аргумента от 1 до 3
# задает диапазон значений по заданным параметрам

# for i in range(2, 9, 1):     # for
#     print(i, end=" ")
# print()
#


# i = 0                        # то же самое, while
# while i < 9:
#     print(i, end=" ")
#     i += 1


# for i in range(9, 0, -1):    # for вывод наоборот (с конца)
#     print(i, end=" ")
# print()
#
# i = 9                          # то же самое, while вывод наоборот (с конца)
# while i > 0:
#     print(i, end=" ")
#     i -= 1

# вывести все числа не которые делится нацело введенное число--------------
# a = int(input("Введите целое число: "))
# for i in range(1, a+1):
#     if a % i == 0:
#         print(i, end=" ")


# Вывести целые числа в диапазоне от 10 до 100, у которых есть две одинаковые цифры.
# for i in range(10, 100):
#     if i // 10 == i % 10:   # i // 10 - выделяем первую цифру; i % 10 - выделяем последнюю цифру
#         print(i, end=" ")


# for i in range(3):
#     print(i)
#     if i == 1:
#         break
# else:
#     print("done")


# -----Вложенный for-----------

# for i in range(3):
#     print("+++")
#     for j in range(2):
#         print("-----")

# ---Вывести прямоугольник из звезд габариты задает пользователь

# w = int(input("Введите длину прямоугольника: "))
# h = int(input("Введите ширину прямоугольника: "))
# for i in range(h):
#     for j in range(w):
#         print("*", end="")
#     print()


# ---Вывести пустой прямоугольник

# w = int(input("Введите длину прямоугольника: "))
# h = int(input("Введите ширину прямоугольника: "))
# for i in range(h):
#     for j in range(w):
#         if i == 0 or i == h - 1 or j == 0 or j == w - 1:
#             print("*", end="")
#         else:
#             print(" ", end="")
#     print()

# -----Запись for в одну строку---------------

# print([i * 5 for i in "Python"])
# print([i for i in range(30)])
# print([i for i in range(30) if i % 2 == 0])


# -----------------Списки (List) Изменяемый тип данных (массив)---------------------------

# num = [9, 3, 8, 4, 1, "Hello", 2.3, True]  # список
# print(num)
# print(type(num))
# print(num[0]) # вывод первого элемента
# print(num[2])  # вывод второго элемента
# print(num[-1])  # вывод последнего элемента
# num[1] = 100   # присвоение первому элементу другого значения
# num[2] += 50   # прибавление к второму элементу 50
# print(num)

# print(len(num))   # len- кол-во элементов в списке
# print(num[-1])  # получение значения последнего элемента (len -1)


# num = []        # создание списка (вариант)
# print(num)
# print(type(num))

# nums = list("Hello")  # создание списка (вариант)
# nums = list(range(2, 21, 2))
# print(nums)
# print(type(nums))


# nums = list("Hello")
# num = nums * 2  # умножение списка
# print(num + [1, 2, 3])

# nums = list(range(2, 100, 10))  # в переменную nums попадают значения элементов
# print(nums)

# for i in nums:  # в переменную i попадают значения элементов
#     print(i)

# for i in range(len(nums)):  # в переменную i попадают индексы элементов
#     print(i)

# for i in range(len(nums)):  # вывод значений элементов по индексу
#     print(nums[i])


# ------------Генератор списков----------------
# [выражение > for > имя переменной > in > последовательность, либо range()]

# a = [0 for i in range(5)]     # 0- то чем заполняется список
# print(a)        # [0,0,0,0,0]
#
# b = [i for i in range(5)]
# print(b)        # [0,1,2,3,4]
#
# b = [i ** 2 for i in range(1, 6)]
# print(b)       # [1, 4, 9, 16, 25]
#
# c = [c * 3 for c in "list"]
# print(c)      # ['lll', 'iii', 'sss', 'ttt']
#

# a = [0] * int(input("Введите кол-во элементов списка: "))  # ввод кол-ва с клавиатуры
# print(a)  # [0, 0, 0]
# for i in range(len(a)):
#     a[i] = int(input("Введите значение: "))  # ввод значений элементов списка
# print(a)


# a = [int(input("Введите значение: ")) for i in range(int(input("Введите кол-во: ")))]  # запись в одну строку
# print(a)


# -----------------------------Урок № 5----------------------------------------

#
# print(range(5))
# print(list(range(5)))
# s = [2, 9, 8, 7, 4]
# for i in range(len(s)):  # чтобы список привести к цифре, надо указать длину(len)
#     # range()- принимает только целочисленное значение
#     print(i, "->", s[i])
#     # print(len(s))

# Посчитать в списке сумму всех отрицательных элементов (список вводит пользователь)

# a = [int(input("-> ")) for i in range(int(input("n= ")))]
# print(a)
# s = 0
# for i in range(len(a)):
#     if a[i] < 0:
#         s += a[i]
# print(s)

# то же самое, но без range()
# a = [int(input("-> ")) for i in range(int(input("n= ")))]
# print(a)
# s = 0
# for i in a:
#     if i < 0:
#         s += i
# print(s)

# lst = list(range(10, 100, 10))
# print(lst)
# for i in range(len(lst)):
#     print(i, end=" ")  # вывод содержимого i
# print()

# lst = list(range(10, 100, 10))
# print(lst)
# for i in range(len(lst)):
#     print(lst[i], end=" ")    # вывод значений элементов lst (списка)
# print()


# lst = list(range(10, 100, 10))
# print(lst)
# for i in range(len(lst)):  # обращение по имени и по индексу
#     print(lst[i], end=" ")  # вывод значений элементов lst (списка) 10 20 30...
# print()     # другие языки программирования
# for i in lst:           # обращение по переменной счетчика (проход по списку(коллекция))
#     print(i, end=" ")  # вывод значений элементов lst (списка) 10 20 30...
#     # чисто Python подход

# colors = ["red", "blue", "green"]
# for i in range(len(colors)):  # обращение по имени и по индексу
#     print(colors[i], end=" ")    # вывод значений элементов lst (списка) red blue green
# print()
# for i in colors:  # обращение по переменной счетчика (проход по списку(коллекция))
#     print(i, end=" ")   # вывод значений элементов lst (списка) red blue green

# в списке на 20 элементов посчитать количества четных элементов, и найти сумму нечет, элементов.
#
# n = list(range(21, 41, 1))
# print(n)
# count = s = 0
# for i in range(len(n)):  # 0 1 2 3 4 5 6 7 8 ...20
#     if n[i] % 2 == 0:
#         count += 1   # кол-во четных элем
#     else:
#         s += n[i]  # сумма нечетных элем
# print("Количество четных элементов: ", count)
# print("Сумма нечетных элементов: ", s)

# решение без использования индекса (запись короче)
# n = list(range(21, 41, ))
# print(n)
# count = s = 0
# for i in n:
#     if i % 2 == 0:
#         count += 1  # кол-во четных элем
#     else:
#         s += i  # сумма нечетных элем
#
# print("Количество четных элементов: ", count)
# print("Сумма нечетных элементов: ", s)


# Дан список чисел. Выведите все элементы списка, которые больше предидущего элем.

# a = [int(input("-> ")) for i in range(int(input("n = ")))]  # ввод данных
# print(a)
# for i in range(1, len(a)):
#     if a[i] > a[i - 1]:
#         print(a[i], end=" ")

# Поменять местами первые два элемента

# a = [7, 9, 3, 1, 2]
# print(a)
# a[0], a[1] = a[1], a[0]  # меняем значения по номеру индекса
# print(a)

# Срезы-----------------------------------------------------------------------------
# Срезы - список[start:stop:step] выводит часть списка по указанным параметрам
#
# s = [5, 9, 3, 7, 1, 8]
# print(s[0:3])  # от 0 индекса до 3 индекса
# print(s[0:])  # от 0 индекса до конца списка
# print(s[:])  # вернется весь список
# print(s[::2])  # выводит каждое 2 значение
# print(s[::-1])  # выводит элементы списка с конца (наоборот)
# print(s[::-2])  # выводит каждое 2 значение с конца
# print(s[0:5:-2])  # выводит каждое 2 значение с конца

# s = [5, 9, 3, 7, 1, 8]
# i = 5
# while i >= 0:
#     print(s[i])
#     i -= 1

# s = [5, 9, 3, 7, 1, 8]
# b = s[0:4] # можно создать дубликат списка

# s = "Hello"
# print(s[0:3])  # срез работает со строками

# # Создать срезы из списка [1,2,3,4,5,6,7]
# s = list(range(1, 8))
# print(s)
# print(s[::-1])
# print(s[::2])
# print(s[1::2])
# print(s[:1])
# print(s[6:7])
# print(s[3:4])
# print(s[4:7])
# print(s[4:1:-1])
# print(s[2:5])

# s = [1, 2, 3, 4, 5, 6, 7]
# print(s)
# s[1:3] = [0, 0, 0, 0] # добавили в список 4 элемента, вместо указанных в диапазоне
# print(s)
# s[1:2] = [20]  # вместо значения с индексом 1 добавили число 20
# print(s)
# # Если мы работаем через срез, то через срез мы добавляем только список []
#
# s[2] = 50 # вместо значения с индексом 2 добавили число 50
# print(s)
# # Если мы изменяем значение какого-то индекса, мы пишем просто какое-то число,
# # потому что один элемент - это какое-тo число... БЕЗ []
#
# s[2:5] = [] # удалили элементы с 2 по 5 индексы
# print(s)
#
# s[1:2] = [20]
# print(s)
#
# # del - функция для удаления (работает с любыми типами данных)
# del s[1] # удалили элемент с индексом 1
# print(s)
#
# del s[1:3]  # удалили элементы с 1 по 3 индексы
# print(s)
#
# # s[:] = []   # очистили список (остались пустые [])
# # print(s)


# --------------Методы-----------------

# dir(list)  # набрать в консоли (можно узнать, какие методы есть для разных
# # объектов (list - объект)
# # 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort'
#
# s = [9, 3, 7, 8, 4, 6, 5]
# print(s)
# # s[len(s):] = [12]  # добавили число 12 в конец списка через срез
# s.append(12)  # метод  добавляет один элемент в конец списка через метод 'append()'
# print(s)
# s.extend([1, 2, 3])  # метод  добавляет любое кол-во в конец списка
# print(s)
# s.extend("add")
# print(s)
# s.insert(0, 'Hello')  # метод  добавляет элемент (второй параметр) в список в заданный индекс (первый параметр)
# print(s)
# s.insert(-1, 'Hello')  # метод  добавляет элемент (второй параметр) в список в заданный индекс (первый параметр)
# print(s)
# s.insert(200, 90)  # так лучше не делать !!!!!!!!!!!!!!!!!!!!!!!!
# print(s)


# s = []  # создали пустой список
# n = int(input("Кол-во элементов списка: "))
# for num in range(n):
#     x = int(input("Введите число: "))
#     s.append(x)  # метод  добавление в список вводимых пользователем чисел
# print(s)


# s = []  # создали пустой список
# n = int(input("Кол-во элементов списка: "))
# for num in range(n):
#     x = int(input("Введите число: "))
#     s.insert(0, x)  # метод  добавление в список по выбранному индексу вводимых пользователем чисел
# print(s)


# Сравнить два списка (a && b) и вывести одинаковые значения в другой список (с)
# a = [5, 9, 2, 1, 4, 3, 2, 4]
# b = [4, 2, 1, 3, 7]
# c = []  # ----------------[2, 1, 4, 3]
# for i in a:  # ---------------5, 9, 2, 1, 4, 3
#     for j in b:  # ----------------4, 2, 1, 3, 7
#         if i in c:  # если элементы (i) уже есть в списке (с)
#             continue
#         if i == j:
#             c.append(i)  # метод  добавление элемента в список
#             break
# print(c)

# Сравнить два списка (a && b) и вывести одинаковые значения в другой список (с)
# Вариант короче
# a = [5, 9, 2, 1, 4, 3, 2, 4]
# b = [4, 2, 1, 3, 7]
# c = []  # ----------------[2, 1, 4, 3]
# for element in a:
#     if element not in c and element in b:  # Если элем нет (not in) в списке (с) и (and) элем есть в (in) списке (b)
#         # условие без вложенного цикла
#         c.append(element)
# print(c)


# -----------------------Урок № 6----------------------------------------------------------------------------------

# a = [1, 2, 3]
# b = [11, 22, 33]
# c = []
# for i in range(len(a)):
#     c.append(a[i])
#     c.append(b[i])
# print(c)


# a = [1, 2, 3, 5]
# b = [11, 22, 33]
# c = []
# for i in range(len(a)):
#     c.append(a[i])
#     c.append(b[i])
# for i in range(len(a), len(b)):
#     c.append(b[i])
# print(c)


# a = [1, 2, 3, 4, 5]
# b = [11, 22, 33]
# c = []
# if len(a) > len(b):
#     a, b = b, a
# if len(b) > len(a):
#     for i in range(len(a)):  # 0-3
#         c.append(a[i])
#         c.append(b[i])
#     for i in range(len(a), len(b)):  # range(3, 5)
#         c.append(b[i])
# else:
#     for i in range(len(b)):  # 0-3
#         c.append(a[i])
#         c.append(b[i])
#     for i in range(len(b), len(a)):  # range(3, 5)
#         c.append(a[i])
# print(c)

# a = [1, 3, 2, 3, 4, 3, 5]
# print(a)
# n = 2
# if n in a:
#     a.remove(3)  # метод  удаление по значению, выбрасывает исключение
# print(a)

# a = [1, 3, 2, 3, 4, 3, 5]
# print(a)
# last = a.pop()  # метод  удаляет последний элемент из списка и возвращает удаленный элемент
# print(last)
# print(a)
# second = a.pop(1)  # метод  удаляет элемент по заданному индексу
# print(second)
# print(a)
# a.clear()  # метод  очищает список
# print(a)


# sp = [int(input("-> ")) for i in range(int(input("Введите количество чисел списка: ")))]
# x = int(input("Введите индекс: "))
# print(sp.pop(x))
# print(sp)

# a = [1, 5, 3, 2, 3, 4, 3, 5]
# print(a)
# num = a.count(5)  # метод  возвращает количество заданных значений в списке
# print(num)
#
# ind = a.index(3)  # метод  возвращает индекс заданного значения
# print(ind)
#
# a.reverse()  # метод перестраивает элементы в обратном порядке
# print(a)
#
# a.sort(reverse=True)  # метод сортировка списка
# print(a)

# s = ["Виталий", "Сергей", "Александр", "Анна"]
# print(s)
# s.sort(reverse=True, key=len)
# print(s)
# print(len("Александр"))

#
# a = [1, 5, 3, 2, 3, 4, 3, 5]
# print(a)
# a.sort()  # метод
# sorted(a)  # функция
# print(a)

# a = [1, 5, 3, 2, 3, 4, 3, 5]
# print(a)
# a.sort()  # метод, изменяет сам список
# print(a)
# n = sorted(a, reverse=True)  # функция, исходный список не изменяет, а возвращает отсортированный новый список
# print("n =", n)

# a = [1, 2, 3]
# b = a.copy()  # создает дубликат списка с другим адресом (другая ячейка памяти)
# print("a =", a, id(a))
# print("b =", b, id(b))
# a.append(20)
# b.append(120)
# print("a =", a, id(a))
# print("b =", b, id(b))


# Генерация случайных данных------------------------------------------------

#  import random - должен располагаться или вверху документа, или после комментов
import random

#
# print(random.random())  # генерирует случайное число от 0 до 1 (не включая 1)
# print(random.randint(0, 9))  # генерирует случайное целочисленное число в заданном диапазоне(от 0 до 9 включительно)
# print(random.randrange(2, 9, 2))  # randrange(start, stop, step) randrange(2, 9)
# print(random.uniform(10.5, 25.5))  # генерирует случайное вещественное (float) число в заданном диапазоне
# print(round(random.uniform(10.5, 25.5), 2))  # округлили до указанных цифр после запятой
#
# city_list = ["Москва", "Новосибирск", "Воронеж", "Сочи", "Екатеринбург"]
# print(random.choice(city_list))  # возвращает случайное значение из указанного списка (строки)
# print(random.choices(city_list, k=3))  # возвращает указанное количество значений из указанного списка, и формирует
# # новый список [] (строки)
#
# s = [20, 30, 40, 50, 60, 70, 80, 90]
# print(random.choice(s))  # возвращает случайное значение из указанного списка (числа)
# print(random.choices(s, k=3))  # возвращает указанное количество значений из указанного списка, и формирует
# # новый список [] (числа)
# random.shuffle(s)  # перемешивает элементы списка
# print(s)


# mas = [0 for i in range(10)]  # список на 10 элементов, заполненный нулями
# print(mas)

# mas = [input("->") for i in range(10)]  # пользователь вводит элементы
# print(mas)

# mas = [random.randint(0, 100) for i in range(10)]  # заполняем список на 10 элементов
# # случайными значениями от 0 до 100
# print(mas)
# print(len(mas))  # длинна списка
# print(min(mas))  # минимальный элемент списка
# print(max(mas))  # максимальный элемент списка
# print(sum(mas))  # сумма всех элементов списка (только с числами), со строками НЕ РАБОТАЕТ


# Заполнить список из 10 элементов случайными числами. Найти максимальный элемент, и переместить его в начало списка
# list_ = [random.randint(0, 100) for i in range(10)]
# print(list_)
# maks = max(list_)  # нашли максимальный элемент, и сохранили его в переменную maks
# print("Max: ", maks)
# list_.remove(maks)  # удалили из списка максим элемент
# list_.insert(0, maks)  # добавили максимальный элемент в начало списка
# print(list_)

# Заполнить список из 10 элементов случайными числами как положительными, так и отрицательными.
# Изменить этот список таким образом, чтобы все отрицательные элементы оказались в конце
# mas = [random.randint(-20, 20) for i in range(10)]
# print(mas)
# mas.sort(reverse=True)  # отсортировали список и вывели его в обратном порядке
# print(mas)

#  Заполнить список из 10 элементов случайными числами. Удалить все элементы, расположенные перед минимальным элементом
# array = [random.randint(0, 100) for i in range(10)]
# print(array)
# minimum = min(array)  # нашли минимальный элемент, и сохранили его в переменную minimum
# print("Min: ", minimum)
# ind = array.index(minimum)  # в переменную ind сохранили индекс минимального элемента
# print(ind)
# print(array[ind:])  # вывели список начиная с индекса минимального элемента


#  Заполнить список из 10 элементов случайными числами. Удалить все элементы, расположенные перед минимальным элементом
# array = [random.randint(0, 100) for i in range(10)]
# print(array)
# minimum = min(array)  # нашли минимальный элемент, и сохранили его в переменную minimum
# print("Min: ", minimum)
# ind = array.index(minimum)  # в переменную ind сохранили индекс минимального элемента
# print("Индекс: ", ind)
# del array[:ind]  # удалили все элементы перед индексом элемента с минимальным значением
# print(array)


# -----------------------Урок № 7----------------------------------------------------------------------------------

# Проверить что список пустой
# lst = []
# if len(lst) == 0:
#     print("Список пустой")

# другой вариант
# lst = []
# if not lst:
#     print("Список пустой")

# lst = [5, 6, 8, 9, 7]
# print(5 not in lst)  # проверяем 5 не существует ли в списке? (вернет false(5 существует в списке))


# ------------------------------------------------------------------------
# Два списка целых заполняются случайными числами.
# Необходимо:
# 1 Сформировать третий список, содержащий элементы обоих списков;
# 2 Сформировать третий список, содержащий элементы обоих списков без повторений;
# 3 Сформировать третий список, содержащий элементы общие для двух списков;
# 4 Сформировать третий список, содержащий только минимальное и максимальное значение каждого из списков.
import random

#
# n1 = int(input("Введите размер первого списка: "))
# n2 = int(input("Введите размер второго списка: "))
# a = [random.randint(0, 10) for i in range(n1)]
# b = [random.randint(0, 10) for j in range(n2)]
# print("Первый список: ", a)
# print("Второй список: ", b)
# c = a + b  # сложили два списка и сохранили их в третьем списке (с)
# print("1 задание: ", c)
#
# c = []  # обнулили третий список
# for i in range(len(a)):  # проходим по первому списку
#     if a[i] not in c:  # искл одинаковые значения(1спис), если элемент не находиться в списке, добавл в третий список
#         c.append(a[i])  # добавляем в третий список (с) элементы первого списка (а)
# for i in range(len(b)):  # проходим по первому списку
#     # if b[i] not in c:  # искл одинаковые значения(2спис), если элемент не находиться в списке, добавл в третий списо
#         c.append(b[i])  # добавляем в третий список (с) элементы второго списка (b)
# print("2 задание: ", c)
#
# c = []  # обнулили третий список
# for i in range(len(a)):  # проходим по первому списку
#     if a[i] in b and a[i] not in c:  # если элемент из 1(а) списка есть во 2(б) списке,
#         # тогда добавляем его в 3(с) список, и исключаем повторяющиеся элементы
#         c.append(a[i])
# print("3 задание: ", c)
#
# c = [min(a), min(b), max(a), max(b)]  # минимальные и максимальные значения всех каждого из списков помещаем в
# # третий(с) список в качестве элементов списка
# print("4 задание: ", c)
# ----------------------------------------------------------------------------------

# Вложенные списки------------------
# Вывод списков в читабельном для пользователя виде
# m = [
#     [1, 2, 3, 4],
#     [5, 6, 7, 8],
#     [9, 10, 11, 12]
# ]
# print
# # print(len(m))
# # print(m[1][2])
# print()
# # вариант 1
# for row in range(len(m)):  # row - строки в таблице
#     # print(row)  # вывели индексы
#     # print(m[row])  # вывели вложенные списки
#     for col in range(len(m[row])):  # проходим по элементам вложенного списка
#         print(m[row][col], end="\t")  #выводим три вложенных списка в три строки (в читабельном для пользователя виде)
#     print()
# print()
# # вариант 2
# for row in m:  # проходим по спискам
#     for x in row:  # при каждой итерации в (х) попадает каждое значение
#         print(x, end="\t")  # выводим три вложенных списка в три строки (в читабельном для пользователя виде)
#     print()

# w, h = 5, 3
# matrix = [[0 for x in range(w)] for y in range(h)]  # вывели список с нулями в одну строку
# print(matrix)
# for row in matrix:
#     for x in row:
#         print(x, end="\t")
#     print()

# for x, y in [[1, 2], [3, 4], [5, 6], [7, 8]]:  # список со вложенными элементами for с двумя переменными
#     print(x, y)

# for x, y in [[1, 2], [3, 4], [5, 6], [7, 8]]:  # список со вложенными элементами for с двумя переменными
#     print(x, "+", y, "=", x + y)  # складываем элементы вложенного списка

import random

# w, h = 5, 3
# matrix = [[random.randint(1, 100) for x in range(w)] for y in range(h)]
# print(matrix)
# print()
# for row in matrix:
#     for x in row:
#         print(x, end="\t\t")
#     print()

# Написать программу, которая случайным образом заполняет двумерный список размерностью 3х4 цифрами от -20 до 10.
# Необходимо найти количество отрицательных элементов.

import random

# w, h = 5, 3
# numb = 0
# matrix = [[random.randint(-20, 10) for x in range(w)] for y in range(h)]
#
# for row in matrix:
#     for x in row:
#         if x < 0:
#             print(x, end="\t\t")
#             if x < 0:
#                 numb += 1
#     print()
# print("Кол-во отрицательных элементов: ", numb)

# Модули--------------------------------------------------------------

import math  # в таком виде к весу самого документа прибавляется вес всего модуля
#
# print(math.sqrt(4))  # нахождение корня квадратного из числа
# print(math.pi)  # число пи
# print(math.ceil(3.2))  # округление в большую сторону (4)
# print(math.floor(3.8))  # округление в меньшую сторону (3)

import math as m  # можно изменять имена модулей, в таком виде к весу самого документа прибавляется вес всего модуля
#
# print(m.ceil(3.2))  # округление в большую сторону (4)
# print(m.floor(3.8))  # округление в меньшую сторону (3)


from math import ceil, floor  # можно изменять имена модулей, в таком виде к весу самого документа не прибавляется
# вес всего модуля (лучше делать так)
#
# print(ceil(3.2))  # округление в большую сторону (4)
# print(floor(3.8))  # округление в меньшую сторону (3)


from math import *  # можно изменять имена модулей.в таком виде к весу самого документа прибавляется вес всего модуля
#
# print(ceil(3.2))  # округление в большую сторону (4)
# print(floor(3.8))  # округление в меньшую сторону (3)


# Пользователь вводит радиус окружности. Найдите длину окружности
from math import pi

# radius = int(input("Введите радиус окружности: "))
# print("Длина окружности: ", round(2 * pi * radius, 2))  # округлили значение радиуса до двух знаков после точки

# Дано два числа: а и b. Выведете гипотенузу треугольника с заданными катетами.
from math import sqrt

# один вариант
# a = int(input("Катет 1: "))
# b = int(input("Катет 2: "))
# c = a ** 2 + b ** 2
# print("Гипотенуза: ", sqrt(c))

# другой вариант (короче)
# a = int(input("Катет 1: "))
# b = int(input("Катет 2: "))
# print("Гипотенуза: ", sqrt(a ** 2 + b ** 2))

import time  # дата и время
import locale  # поменяли язык

# locale.setlocale(locale.LC_ALL, "ru")  # поменяли язык
#
# second = time.time()
# print(second)  # кол-во секунд, прошедших с начала 1970г (начало цифровой эпохи)
# print(time.ctime())  # возвращает местное время в строке
# print(time.ctime(5869958))  # s- можно ввести другое время (по ситуации???)
# res = time.localtime()
# print(res)  # возвращает объект, представляющий местное время или s (год, месяц, день недели)
# print(res.tm_year)  # вывели только текущий год
# print(res.tm_mday, ".0", res.tm_mon, ".", res.tm_year, sep="")  # вывели текущую дату и время
#
# print(time.strftime("Today is %B %d,%Y"))  # разбирает строку s и преобразует в объект времени по формату
# print(time.strftime("Сегодня: %B %d,%Y"))  # разбирает строку s и преобразует в объект времени по формату
# print(time.strftime("%d/%m/%Y, %H:%M:%S"))  # вывели текущую дату и время

# pause = 5
# print("Программа запущена")
# time.sleep(pause)  # останавливает ход выполнения программы ровно на заданное кол-во секунд
# print(pause, "секунд")

# start = time.monotonic()  # время работы программы???
# time.sleep(5)
# finish = time.monotonic()
# res = finish - start
# print(res)


# ФУНКЦИИ------------------------------------
# print()
#
#
# def hello(name):  # def - ключевое слово означающее, что это функция
#     print("Hello", name)
#
#
# hello("Irina")
# hello("Ivan")

# ------------------------------------------
# def get_sum(a, b):
#     print(a + b)
#
#
# x = 2
# y = 5
# get_sum(x, y)


# --------------------------------
# def get_sum(a, b):
#     print(a + b)
#
#
# n = 6
# m = 3
# get_sum(n, m)
# get_sum("abc", "def")

# ----------------------------------

# def get_sum(a, b):
#     return a + b # производится действие функции,
#
#
# x = 2
# y = 5
# res = get_sum(x, y)  # вызов функции (возвращается результат)
# print(res)


# -----------------------Урок № 8----------------------------------------------------------------------------------

# ФУНКЦИИ------------------------------------

# Определение максимального числа из двух чисел
# def maximum(one, two):  # функция принимает два числа
#     if one > two:  # само действие функции
#         return one
#     else:
#         return two
#
#
# m = maximum(9, 6)  # сохраняем результат (введенных чисел 9 и 6) в переменную m
# print(m)  # выводим результат


# Написать функцию, нахождения разности, если a<b, a и b - вводятся с клавиатуры
# def diff(a, b):
#     if a > b:
#         return a - b
#     else:
#         return a + b
#
#
# res = diff(int(input("Введите 1 число: ")), int(input("Введите 2 число: ")))  # ввод данных прямо в функцию
# print(res)

# Вывести куб всех чисел от 1 до 10 (функция, которая принимает один параметр и возвращает значение)
# def cube(a):
#     return a * a * a
#
#
# for i in range(1, 11):
#     print(i, "в кубе =", cube(i))

# Напишите функцию change(lst), которая принимает список и меняет местами его первый и последний элемент.
# В исходном списке минимум 2 элемента.
# def change(lst):
#     lst[0], lst[-1] = lst[-1], lst[0]  # через множеств. присваивание нулевому элементу присвоили значение последн.
#     return lst
#
#
# print(change([1, 2, 3]))
# print(change([9, 12, 33, 54, 105]))
# print(change(["с", "л", "о", "н"]))

# другой способ
# def change(lst):
#     start = lst.pop()  # удалили последние элементы списка
#     end = lst.pop(0)  # удалили нулевые элементы списка по индексу
#     lst.append(end)  # добавили в конец списка нулевой элемент
#     lst.insert(0, start)  # добавили в начало списка последний элемент
#     return lst
#
#
# print(change([1, 2, 3]))
# print(change([9, 12, 33, 54, 105]))
# print(change(["с", "л", "о", "н"]))

# возвращение True или False

# def func(x, y):
#     if x > y:
#         return True
#     else:
#         return False
#
#
# print(func(10, 5))  # возвращает True
# print(func(5, 10))  # возвращает False
# a = 10
# b = 5
# if func(a, b):
#     print("Первое число больше второго")
# else:
#     print("Второе число больше первого")

# Задача на проверку надежности пароля-------------------------------------------------

# def check_password(password):
#     has_upper = False
#     has_lower = False
#     has_num = False
#
#     for ch in password:  # проходим по всей строке пароля
#         if "A" <= ch <= "Z":  # проверяем на верхний регистр (номер в таблице кодировки ASCII)
#             has_upper = True  # если есть верхний регистр, has_upper меняется с False на True
#         if "a" <= ch <= "z":  # проверяем на нижний регистр (номер в таблице кодировки ASCII)
#             has_lower = True  # если есть нижний регистр, has_lower меняется с False на True
#         if "0" <= ch <= "9":  # проверяем на наличие цифр (номер в таблице кодировки ASCII)
#             has_num = True  # если есть цифры, has_num меняется с False на True
#
#     if len(password) >= 8 and has_upper and has_lower and has_num:  # меньше 8 символов, верх регистр, нижний, цифры
#         return True  # если все условия соблюдены (венет True)
#     return False  # если хоть одно условие не соблюдено (вернет False)
#
#
# p = input("Введите пароль: ")
# if check_password(p):
#     print("Это надежный пароль")  # если функция вернула True
# else:
#     print("Это ненадежный пароль")  # если функция вернула False


# Типы аргументов (позиционные и именованные аргументы)-----------------------------
# def get_sum(a, b, c=0, d=1):
#     return a + b + c + d
#
#
# print(get_sum(1, 5, 2, 7))
# print(get_sum(1, 5, 2))  # 9
# print(get_sum(1, 5))
# print(get_sum(1, 5, d=2))  # 8

# Написать функцию, которая имеет количество символов = 20 и символ "-" в качестве аргументов по умолчанию и
# выводит на экран набор произвольных символов заданной длины.
# def set_param(c=20, s="-"):
#     print(s * c)  # "-" * 20
#
#
# set_param()  # возвращает значения по умолчанию (по дефолту)
# set_param(7)  # изменяем значения аргументов в функции с помощью изменения именных параметров
# a = "#"
# set_param(s=a)  # изменяем значения аргументов в функции с помощью изменения именных параметров


# Написать функцию, принимающую некоторое целое число и вычисляющую по умолчанию сумму его четных цифр.
# Предусмотреть возможность изменения поведения функции таким образом, чтобы она также могла вычислять сумму нечетных
# цифр.

# def digit_sum(n, even=True):  # 9874023, добавили принимаемый параметр(именованный аргумент)
#     s = 0
#     while n > 0:  # циклом проходим по числам
#         cur_digit = n % 10  # с каждым проходом отделяем от числа последнюю цифру, и сохраняем в переменную
#         if even and cur_digit % 2 == 0:  # проверяем на четность каждую последнюю цифру числа
#             s += cur_digit  # если цифра четная, складываем
#         if not even and cur_digit % 2 != 0:  # проверяем на нечетность каждую последнюю цифру числа
#             s += cur_digit  # если цифра нечетная, складываем
#         n //= 10  # с каждым проходом число меньше на одну цифру
#
#     return s
#
#
# print("Сумма четных цифр: ")
# print(digit_sum(9874023))  # исходные данные
# print(digit_sum(38271))  # исходные данные
# print(digit_sum(123456789))  # исходные данные
#
# print("Сумма нечетных цифр: ")
# print(digit_sum(9874023, even=False))  # исходные данные, добавили принимаемый параметр(именованный аргумент)
# print(digit_sum(38271, even=False))  # исходные данные, добавили принимаемый параметр(именованный аргумент)
# print(digit_sum(123456789, even=False))  # исходные данные, добавили принимаемый параметр(именованный аргумент)


# def display_info(name, age):
#     print("Name: ", name, "\nAge: ", age)
#
#
# display_info("Ira", 23)
# display_info(23, "Ira")
# display_info(age=23, name="Ira")


# a = "Hello"
# b = "Hello"
# print(a == b)  # True
# print(a is b)  # оператор (is) указывает, ссылаются ли указанные переменные на одну и ту же область памяти
# print(a is b)  # True
#
# a = "Hello"
# b = "Hello"
# print(a, id(a))  # вывели id (a и b одинаковое id)
# print(b, id(b))  # вывели id (a и b одинаковое id)
# print(a == b)  # True
# print(a is b)  # True
#
# lst1 = [1, 2, 3]
# lst2 = [1, 2, 3]  # создали два одинаковых списка
# print(lst1, id(lst1))  # вывели id (lst1 и lst2 разное id) одинаковые списки, но разные адреса в памяти
# print(lst2, id(lst2))  # вывели id (lst1 и lst2 разное id) одинаковые списки, но разные адреса в памяти
# print(lst1 == lst2)  # True
# print(lst1 is lst2)  # False оператор (is) указывает, ссылаются ли указанные переменные на одну и ту же область памяти

# Изменяемые объекты - list
# Неизменяемые объекты - int, float, bool, str, tuple

# lst1 = [1, 2, 3]
# print(lst1, id(lst1))
# lst1.append(4)  # добавили элемент в список
# print(lst1, id(lst1))  # id(адрес в памяти) при этом не изменился

# Тип данных - tuple, также явл-ся функцией явного преобразования типов --------------------------------------------
# Кортежи (tuple) - неизменяемый тип данных

# lst = [10, 20, 30]  # создали список
# tpl = (10, 20, 30)  # создали кортеж
# print(lst)
# print(tpl)
# print(lst.__sizeof__())  # выводит размер в байтах (72 байта)
# print(tpl.__sizeof__())  # выводит размер в байтах (48 байта)

# a = "red", "blue", "green"  # передали в переменную несколько значений (получили кортеж)
# print(a)
# print(type(a))  # тип данных tuple (кортеж)

# a = (5,)  # запятая после одного элемента превращает в tuple(кортеж)
# print(a)
# print(type(a))  # круглые скобки - тип данных tuple(кортеж)

# a = tuple("Hello")  # функция tuple() - преобразует в кортеж(тип данных "строки" -> в кортеж)
# a = tuple([1, 5, 8, 9, 6])  # функция tuple() - преобразует в кортеж (тип данных "список" -> в кортеж)
# print(a)
# print(type(a))  # круглые скобки - тип данных tuple(кортеж)
# print(a[0])  # обращение к элементам кортежа по индексу
# print(a[1:3])  # обращение к элементам кортежа через срез

# Изменить значение и количество элементов в кортеже невозможно!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


# -----------------------Урок № 9----------------------------------------------------------------------------------

# Кортежи----------------------------------------

# s = [i for i in range(5)]  # сгенерировали список
# s = tuple([i for i in range(5)])  # преобразовали список в кортеж
# s = tuple(input("Введите значение: ") for i in range(5))  # ввод значения в кортеж
# print(s)

from random import randint  # генератор случайных значений

# s = tuple(randint(20, 40) for i in range(5))  # сгенерировали кортеж
# print(s)

# Заполните кортеж из 10 элементов степенями двойки от 1 до 12
# s = tuple(2 ** i for i in (range(1, 13)))
# print(s)

# t1 = tuple("Hello")  # создали кортеж
# t2 = tuple("World")  # создали кортеж
# t3 = t1 + t2  # сложили два разных кортежа, получили третий кортеж
# print(t3)
# print(t3 * 2)  # умножили кортеж
#
# print(t3.count("l"))  # count- считает сколько элементов по указанному значению
# print(t3.index("l"))  # index- возвращает индекс указанного значения
# print(t3.index("l", 5))  # если надо узнать индекс у похожего же значения, указываем индекс, следующий за выведенным

# t1 = tuple("Hello")  # создали кортеж
# t2 = tuple("World")  # создали кортеж
# t3 = t1 + t2  # сложили два разных кортежа, получили третий кортеж
# print(t3)
# for i in t3:  # проходим циклом по кортежу
#     print(i, end=" ")

# Задача. Функция slicer() на вход принимает кортеж из случайных элементов. Требуется вернуть новый кортеж,
# начинающийся с первого появления элемента в нем и заканчивающийся вторым его появлением включительно.
#   Если элемента нет вовсе - вернуть пустой кортеж.
#  Если элемент встречается только один раз, то вернуть кортеж, который начинается с него и идет до конца исходного.

# def slicer(tpl, el):  # функция принимает кортеж и случайный элемент
#     if el in tpl:  # есть ли искомый элемент в кортеже
#         if tpl.count(el) > 1:  # проверяем, количество искомых элементов, если больше 1, то
#             first = tpl.index(el)  # находим и сохраняем в переменную индекс первого из похожих искомых элементов
#             second = tpl.index(el, first + 1)  # после индекса искомого элемента находим другие похожие элементы
#             return tpl[first:second + 1]  # выводит с первого появления - до второго появления иск элемента включит
#         else:  # если в кортеже только один искомый элемент
#             return tpl[tpl.index(el):]  # через срез выводит искомый элемент и последующие элементы до конца кортежа
#     else:
#         return tuple()  # если нет искомого элемента, выводит пустой кортеж
#
#
# print(slicer((1, 2, 3,), 8))  # вызов функции
# print(slicer((1, 8, 3, 4, 8, 8, 9, 2), 8))  # вызов функции
# print(slicer((1, 2, 8, 5, 1, 2, 9), 8))  # вызов функции

from random import randint


# def ran(a, b):
#     return tuple(randint(a, b) for i in range(10))
#
#
# def foo(a, b):
#     res = a + b
#     c = res.count(0)
#     return res, c
#
#
# tpl1 = ran(0, 5)
# print(tpl1)
# tpl2 = ran(-5, 0)
# print(tpl2)
# print(foo(tpl1, tpl2))


# t = (10, 11, [1, 2, 3], [4, 5, 6], ["hello", "world"])  # создали кортеж из разных типов данных, и списков
# print(t, id(t))
# t[4][0] = "new"  # изменили значение в 4 элементе кортежа -> 0 элемент списка, id(адрес в памяти) при этом не изменил
# t[4].append("hi")  # добавили в конец списка(находящегося в кортеже) новый элемент
# print(t, id(t))

# Распаковка кортежа-------------------------------------------------

# t = (1, 2, 3,) # создали кортеж
# x = t[0] # создали переменную, и в нее положили элемент по индексу 0
# y = t[1] # создали переменную, и в нее положили элемент по индексу 1
# z = t[2] # создали переменную, и в нее положили элемент по индексу 2
# print(x, y, z, end=" ")  # 1 2 3

# Распаковка кортежа, короткая запись
# t = (1, 2, 3,) # создали кортеж
# x, y, z = t # распаковка кортежа
# print(x, y, z)  # 1 2 3

# def get_user():
#     name = "Tom"
#     age = 22
#     is_married = False
#     return name, age, is_married


# user = get_user()  # ('Tom', 22, False)
# # first_name, year, married = user  # распаковали кортеж
# first_name, year, married = get_user()   # распаковали кортеж
# print(first_name, year, married)
# print(user)
# print(user[0])
# print(user[1])
# print(user[2])

# Задача. Вернуть сумму и кол-во элементов
# def func(lst):  # функция принимает один аргумент - список
#     return sum(lst), len(lst)  # вернули два сразу значения - сумму элементов и их кол-во
#
#
# a, b = func([2, 9, 6, 5, 8, 7, 5, 8, 7, 1, 4, 5, 4])  # разделили вывод
# print("Сумма: ", a)
# print("Количество: ", b)

# Преобразование списка в кортеж, и кортежа в список -----------------------------

# lst = [1, 2, 3, 4, 5]  # создали список
# print(lst)
# tpl = tuple(lst)  # преобразовали список в кортеж
# print(tpl)
# lst1 = list(tpl)  # преобразовали кортеж в список (если надо что-то изменить в кортеже, кортеж преобразуется в список)
# print(lst1)

# Вложенные кортежи ----------------------------------------
# создали кортеж с вложенными кортежами
# countries = (
#     ("Германия", 80.2, (("Берлин", 3.326), ("Гамбург", 1.718))),
#     ("Франция", 66, (("Париж", 2.2), ("Марсель", 1.6)))
# )
# print(countries)
#
# # Придаем данным читабельный для пользователя вид, достаем данные из вложенных элементов, и получаем к ним доступ
# for country in countries:  # проходим циклом по кортежу
#     country_name, country_population, cities = country  # распаковали кортеж (элементы записали в переменные)
#     print("\nСтрана:", country_name, ", население =", country_population, )  # добавляем пояснения и выводим
#     for city in cities:  # вложенным циклом проходим по элементам во вложенном кортеже
#         city_name, city_population = city  # распаковали вложенный кортеж (элементы записали в переменные)
#         print("\tГород: ", city_name, ", население = ", city_population, sep="")  # добавляем пояснения и выводим

# Тип данных - множество (set) - неупорядоченная коллекция которая содержит только уникальные элементы ------------

# s = {"banana", "apple", "orange"}  # создали множество (set)
# print(s)
# print(len(s))
# print(type(s))
# # множество не имеет индекса, обратиться к элементу по индексу - невозможно
# for i in s:  # проходим циклом по множеству
#     print(i)  # выводит элементы в произвольном порядке

# очень удобный тип данных, позволяющий избавиться от повторяющихся элементов
# избавляемся от повторяющихся элементов списка
# s = ["banana", "apple", "orange", "banana", "apple"]  # создали список
# print(s)
# st = set(s)  # преобразовали список к типу данных set(), после чего в списке остались только уникальные элементы
# print(st)
# s1 = list(st)  # вернули обратно в список

# a = set()  # создали пустое множество
# a = set("Hello")
# print(type(a))
# print(a)

# s = {i for i in range(5)}  # сгенерировали set() на 5 элементов
# s = {i * i for i in range(15)}  # сгенерировали set() на 15 элементов и увеличили диапазон значений элементов
# s = {input("-> ") for i in range(5)}  # ввод значений с клавиатуры
# print(s)

# Задача. Проверить, присутствует ли элемент в множестве set()
# a = set("Hello")  # создали множество
# print(a)
# print("o" in a)  # проверяем, есть ли символ "o" в множестве, (вернет True, символ есть)
# print("a" in a)  # проверяем, есть ли символ "a" в множестве, (вернет False, символа нет)

# a = set("Hello")  # создали множество
# print(a)
# a.add("a")  # добавили элемент в множество, методом .add()
# print(a)
# a.remove("e")  # удалили указанный элемент, методом  .remove()
# print(a)

# a = set("Hello")  # создали множество
# print(a)
# el = "e1"
# if el in a:  # проверяем, есть ли указанный элемент в множестве
#     a.remove(el)  # если есть, удаляем его
# print(a)
# a.discard("o")  # метод .discard()- удаляет элемент без генерации исключения
# print(a)
# a.pop()  # метод .pop()- удаляет первый элемент
# print(a)
# a.clear()  # метод .clear()- удаляет все элементы из множества
# print(a)


# -----------------------Урок № 10 ----------------------------------------------------------------------------------

# GitHub

# print("Hello")

# print("Данные для добавления на GitHub")


# -----------------------Урок № 11 ----------------------------------------------------------------------------------


# s = ["ab_1", "ac_2", "bc_1", "bc_2"] # создали список
# a = [i for i in s] # генератор списка в одну строку
# print(a)

# Варианты записи условия for in
# вариант 1 (условия находится справа от for)
# s = ["ab_1", "ac_2", "bc_1", "bc_2"]
# a = [x for x in s if "a" not in x]  # если "a" не находиться в элементе x
# print(a)

# вариант 2 (условия находится слева от for)
# s = ["ab_1", "ac_2", "bc_1", "bc_2"]
# a = ["A " if x[0] == "a" else "B" for x in s]  # если в индексе[0] есть "а", выводим "А", если нет, то выводим "В"
# print(a)

# Заменили маленькую "а" и "б" на большую "А" и "В" через срез и конкатенацию
# s = ["ab_1", "ac_2", "bc_1", "bc_2"]
# a = ["A" + x[1:] if x[0] == "a" else "B" + x[1:] for x in s]  # тернарное выражение q = True if условие else False
# print(a)

# Дополнительное условие- if и else используется с левой стороны от for, справа - только один if
# s = ["ab_1", "ac_2", "bc_1", "bc_2"]
# a = ["A" + x[1:] if x[0] == "a" else "B" + x[1:] for x in s if x[1] == "c"]  # если в индексе[1] есть "с" выводим
# print(a)

# Используем  множество set()
# s = ["ab_1", "ac_2", "bc_1", "bc_2"]
# a = {"A" + x[1:] if x[0] == "a" else "B" + x[1:] for x in s if x[1] == "c"}  # если в индексе[1] есть "с" выводим
# print(a)

# Вернули список
# s = ["ab_1", "ac_2", "bc_1", "bc_2"]
# a = ["A" + x[1:] if x[0] == "a" else "B" + x[1:] for x in s if x[1] == "c"]  # если в индексе[1] есть "с" выводим
# print(a)

# Вывод в одну строку
# print(["A" + x[1:] if x[0] == "a" else "B" + x[1:] for x in ["ab_1", "ac_2", "bc_1", "bc_2"] if x[1] == "c"])

# без помощи тернарного оператора
# lst = []
# for x in s:
#     if x[1] == "c":
#         if x[0] == "a":
#             lst.append("A" + x[1:])
#         else:
#             lst.append("B" + x[1:])
# print(lst)

# Преобразовали в кортеж с помощью tuple()
# print(tuple("A" + x[1:] if x[0] == "a" else "B" + x[1:] for x in ["ab_1", "ac_2", "bc_1", "bc_2"] if x[1] == "c"))

# Множества {} - методы, операторы ----------------------------------------------------------------------

# a = {0, 1, 2, 3} # создали множество
# b = {4, 3, 2, 1} c# создали множество

# c = a.union(b)  # .union() - метод, возвращает множество, являющиеся объединением множеств a и b
# print(c)
# c = a | b  # | оператор, возвращает множество, являющиеся объединением множеств a и b
# print(c)
#
# a |= b  # | оператор, добавляет в множество a все элементы из множества b #(a = a + b)
# a.update(b)  # .update() метод , добавляет в множество a все элементы из множества b #(a = a + b)
# print(a)

# c = a & b # & оператор, возвращает множество, являющиеся пересечением множеств a и b
# a.intersection(b)  # метод(),возвращает множество, являющиеся пересечением множеств a и b
# print(c)

# a &= b # &= оператор, оставляет в множестве a только те элементы, которые есть в множестве b
# a.intersection_update()  # метод (), оставляет в множестве a только те элементы, которые есть в множестве b
# print(a)

# c = a - b # - оператор, возвращает разность множеств a и b (элементы, входящие в a, но не входящие в b)
# a.difference(b) # метод(), возвращает разность множеств a и b (элементы, входящие в a, но не входящие в b)
# print(c)

# a -= b # -= оператор, удаляет из множества a все элементы, входящие в b
# a.difference_update(b)  # метод(), удаляет из множества a все элементы, входящие в b
# print(a)
#
# c = a ^ b  # ^ - оператор, забирает уникальные элементы из a и из b
# a.symmetric_difference(b)  # метод(), забирает уникальные элементы из a и из b
# print(c)

# a ^= b  # ^= - оператор, забирает и сохраняет в переменную a уникальные элементы из a и из b
# print(a)
# a.symmetric_difference_update(b)  # метод(), забирает и сохраняет в переменную a уникальные элементы из a и из b

# Задача. Дан набор множеств. Найти кол-во уникальных элементов во всех множествах. Найти мин и макс элементы
# s1 = {1, 2}
# s2 = {3}
# s3 = {4, 5}
# s4 = {3, 2, 6}
# s5 = {6}
# s6 = {7, 8}
# s7 = {9, 8}
# # s = s1.union(s2, s3, s4, s5, s6, s7)  # сложили множества (через метод())
# s = s1 | s2 | s3 | s4 | s5 | s6 | s7  # сложили множества (через оператор |)
# print(s)
# print("Количество уникальных элементов: ", len(s))  # нашли кол-во элем с помощью функции len()
# print("мин: ", min(s))  # нашли мин значение с помощью функции min()
# print("макс: ", max(s))  # нашли макс значение с помощью функции max()

# Задача. Найдите общие буквы в двух разных строках.
# s1 = "Hello"
# s2 = "How aer you"
# s = set(s1) & set(s2) # преобразовали строки в множество(), нашли общие элементы и сохранили в переменную
# print(s)
# for i in s:  # проходим циклом, и убираем видимость set() в выводе ({})
#     print(i, end=" ")

# Задача. Найдите все буквы в первой строке, которые отсутствуют во второй строке
# s1 = "Python"
# s2 = "Programming language"
# s = set(s1) - set(s2)  # преобразовали строки в множество(), нашли искомые элементы и сохранили в переменную
# print(s)
# for i in s:  # проходим циклом, и убираем видимость set() в выводе ({})
#     print(i, end=" ")

# Задача № 5 папка № 10
# drawing = {"Марина", "Женя", "Света"}  # создали множество(), дети в кружке рисования
# music = {"Костя", "Женя", "Илья"}  # создали множество(), дети в кружке музыки
# one_hobby = drawing ^ music  # дети, которые занимаются только в одном кружке
# print("Только одно хобби", one_hobby)
# both_hobby = drawing & music  # кто занимается сразу в двух кружках
# print("Два хобби", both_hobby)
# drawing = drawing - both_hobby  # из кружка рисования вычли Женю
# print("В кружке рисования остались", drawing)

# Подмножество -------------------------------

# a = {0, 1, 2, 3, 4}
# b = {3, 2, 1}
# print(a >= b)  # >= оператор, вернет True если b явл-ся подмножеством a , иначе вернет False
# a.issuperset(b)  # метод, вернет True если b явл-ся подмножеством a , иначе вернет False

# b = {0, 1, 2, 3, 4}
# a = {3, 2, 1}
# print(a <= b)  # <= оператор, вернет True если a явл-ся подмножеством b , иначе вернет False
# a.issuperset(b)  # метод, вернет True если a явл-ся подмножеством b , иначе вернет False


# Тип данных frozenset (замороженный set(), множество которое изменять нельзя,используется для защиты set())---------
#
# s = frozenset([1, 2, 3, 4, 5, 6])
# print(s)

# s = frozenset("Hello")
# print(s)


# Тип данных Словари (dict) (так же как и список, явл-ся изменяемым типом данных)-----------------------------------
# Ключом в словаре может быть только неизменяемый тип данных
# Ключи повторяться не могут, если название ключа повторяется, то значение ключа перезаписывается
# Значением в словаре может быть любой тип данных, а также вложенный словарь

# s = [1, 2, 3] # создали список
# d = {"one": 1, "two": 2, "three": 3} # создали словарь (у словаря есть ключи и значения) (ключ:значение)
# print(s)  # вывели список
# print(d)  # вывели словарь

# s = [1, 2, 3]  # создали список
# d = {"one": 1, "two": 2, "three": 3}  # создали словарь (у словаря есть ключи и значения) (ключ:значение)
# print(s[1])  # обратились к элементу списку по индексу
# print(d["two"])  # обратились к элементу словаря по ключу
#
# s1 = ["ont", "two", "three"]   # создали список
# d1 = {1: "one", 2: "two", 3: "three"}  # создали словарь (у словаря есть ключи и значения) (ключ:значение)
# print(s1[1])    # обратились к элементу списку по индексу
# print(d1[2])   # обратились к элементу словаря по ключу

# d = {0: "test", "one": 45, (1, 2.3): "Кортеж", True: 1, 54: {1: 2}}  # ключ - число, строка, кортеж, бул значение,
# print(d)

# d = {0: "test", "one": 45, (1, 2.3): "Кортеж", True: 1, 54: {1: 2}}
# print(d[(1, 2.3)])  # обращение к значению с ключом кортеж()

# d = {0: "test", "one": 45, (1, 2.3): "Кортеж", True: 1, 54: {1: 2}}
# print(d)
# d[(1, 2.3)] = 100  # изменили значение у элемента с ключом кортеж() (значение было "Кортеж" мы поменяли на "100")
# print(d)

# d = {"one": 1, "two": 2}  # создали словарь через фигурные скобки
# print(d)
# print(type(d))

# d1 = dict(one=1, two=2)  # создали словарь с помощью функции явного преобразования типов dict(), ключ - только строки
# print(d1)
# print(type(d1))

# d1 = dict([("one", 1), ("two", 2)])  # список кортежей преобразовали в словарь
# print(d1)

# Генерация словарей ----------------------------------

# d = {x: x for x in range(7)}  # сгенерировали словарь в котором ключи и значения одинаковы
# print(d)

# Проверяем наличие элемента в словаре ---------------

# Проверка через оператор "in"
# d = {"one": 1, "two": 2, "three": 3} # создали словарь (у словаря есть ключи и значения) (ключ:значение)
# print("two" in d)  # проверяем есть ли ключ "two" словаре d (вернет True, ключ есть)

# Проверка через условие "if"
# d = {"one": 1, "two": 2, "three": 3}
# key = "four"  # ключ наличие которого проверяем (в словаре его нет)
# if key in d:  # проверяем есть ли ключ "key" словаре d (вернет пустой вывод, такого ключа нет в словаре)
#     print(d[key])

# Проверка через исключение "try: - except KeyError:"
# d = {"one": 1, "two": 2, "three": 3}
# key = "four"  # ключ наличие которого проверяем (в словаре его нет)
# try:
#     print(d[key])  # если ключ есть, вернет значение ключа
# except KeyError:
#     print("Такого ключа не существует")

# d = {"one": 1, "two": 2, "three": 3} # создали словарь (у словаря есть ключи и значения) (ключ:значение)
# print(len(d))  # посчитали количество элементов по количеству ключей
# for key in d: # проходим циклом по словарю (в переменную "d" попадают только ключи)
#     print(key)  # возвращает ключи
#     print(key, "->", d[key])  # возвращает значение.
# Значение можно найти только по ключу

# Удаление ключей ------------------------------------

# d = {"one": 1, "two": 2, "three": 3}  # создали словарь (у словаря есть ключи и значения) (ключ:значение)
# print(d)
# key = "one"
# del d[key]  # удалили ключ при помощи функции del
# print(d)

# Задача. Дан словарь с числовыми значениями. Необходимо их все перемножить и вывести на экран. (ответ -105)
# d = {"x1": 3, "x2": 7, "x3": 5, "x4": -1}
# res = 1
# for key in d:
#     res *= d[key]
# print(res)

# Задача. Предложите пользователю ввести названия четырех овощей и сохраните их в словаре с числовыми индексами,
# начиная с 1. Выведете содержимое словаря с указанием индексов и элементов. Спросите пользователя, какой элемент он
# хочет исключить, и удалите его из списка. Выведете содержимое словаря.

# 1 вариант ввода данных ???
# d = dict() # создали пустой словарь
# d[1] = input("Введите данные: ")
# d[2] = input("Введите данные: ")
# d[3] = input("Введите данные: ")
# d[4] = input("Введите данные: ")
# print(d)

# 2 вариант при помощи генератора словарей (более удобный !!!!!!!!!!!!!!!!!!!!!!!!!)
# d = {key: input("Введите данные: ") for key in range(1, 5)}  # ввод данных с клавиатуры, если ключи - числовые знач
# print(d)
# try:  # применили исключения ошибок
#     dislike = int(input("Какой элемент исключить: "))  # ввели удаляемый элемент
#     del d[dislike]  # удалили элемент
# except (KeyError, ValueError):  # ошибка - ввод несуществующего ключа
#     print("Такого ключа(элемента) не существует")
# print(d)


# -----------------------Урок № 12 ----------------------------------------------------------------------------------


# d = {"x1": 3, "x2": 7, "x3": 5, "x4": -1}  # создали словарь
# print(len(d))  # длина словаря (кол-во элементов, по кол-ву ключей)

# Задача.(Папка 11 задание 3) Написать программу, в которой хранятся данные о товарах, их количестве и цене.
# При запуске программы эта информация выводится на экран. Далее пользователю должно предлагаться вводить номера
# товаров и их новое количество. Изменение данных должно завершаться, если пользователь вводит специально оговоренный
# символ (например 0). После этого все данные о товарах должны снова выводиться на экран.

# goods = {  # создали словарь
#     "1": ["Core-i3-4330", 9, 4500],  # ключ:значение поместили в список
#     "2": ["Core i5-4670K", 3, 8500],  # ключ:значение поместили в список
#     "3": ["AMD FX-6300", 6, 3700],  # ключ:значение поместили в список
#     "4": ["Pentium G3220", 8, 2100],  # ключ:значение поместили в список
#     "5": ["Core i5-3450", 5, 6400],  # ключ:значение поместили в список
# }
# for key in goods:  # проходим по словарю и выводим данные
#     print(key, ") ", goods[key][0], " - ", goods[key][1], " шт. по ", goods[key][2], " руб.", sep="")
#
# while True:
#     n = input("№: ")  # ввод номера товара
#     if n != "0":  # если n не ноль
#         if n in goods:  # если n есть в словаре
#             while True:
#                 try:  # защита от некорректного ввода значения
#                     count = int(input("Кол-во: "))  # ввод кол-ва товара
#                     goods[n][1] += count  # подсчет товара (сколько стало после добавления)erere
#                     break
#                 except ValueError:
#                     print("Значение некорректное. Введите число")
#         else:
#             print("Такого ключа не существует")
#     else:
#         break
#
# for key in goods:  # вывод с измененными данными
#     print(key, ") ", goods[key][0], " - ", goods[key][1], " шт. по ", goods[key][2], " руб.", sep="")
# ---------------------------------------------------------------------------------------------------------

# Методы словарей ('clear', 'copy', 'fromkeys', 'get', 'items', 'keys', 'pop',
# 'popitem', 'setdefault', 'update', 'values')

# d = {"x1": 3, "x2": 7, "x3": 5}  # создали словарь
# print(d)
# del d['x1']  # удалили элемент обращаясь к ключу
# print(d)
# d['x4'] = 10  # добавили ключ и значение (добавили новый элемент)
# print(d)
#
# a = {"one": 1}  # создали словарь
# c = d | a  # сложили два словаря
# print(c)


# d = {"x1": 3, "x2": 7, "x3": 5}  # создали словарь
# print(d)
#
# print(d.values())  # .values() метод -  выводит список значений
# print(d.keys())  # .keys() метод - выводит список ключей
# print(d.items())  # .items() метод - выводит список кортежей, состоящий из ключей и значений

# for key, value in d.items():  # распаковали элементы кортежа в словаре, вывели кортеж в две переменные
#     print(key, '->', value)

# d = {"x1": 3, "x2": 7, "x3": 5}  # создали словарь
# print(d)
# print(list(d))  # преобразовали словарь в список, выводит список из ключей ['x1', 'x2', 'x3']
# print(list(d.values()))  # преобразовали словарь в список, выводит список из значений [3, 7, 5]
# print(list(d.items()))  # словарь в список, список из кортежей ключей и значений [('x1', 3), ('x2', 7), ('x3', 5)]
# # так же можно преобразовать в тип данных tuple() , set()

# d = {"x1": 3, "x2": 7, "x3": 5}  # создали словарь
#
# d2 = d
# print("d =", d)
# print("d2 =", d2)
#
# d2["x4"] = 10  # добавили элемент в один словарь, и второй словарь также изменился
# print("d =", d)
# print("d2 =", d2)
#
# d["x1"] = 100  # изменили значение элемента по ключу
# print("d =", d)
# print("d2 =", d2)
# ---------------------------------------
# d = {"x1": 3, "x2": 7, "x3": 5}  # создали словарь
# print(d)
# d2 = d.copy()  # .copy() метод - скопировали словарь в другую переменную (другую область памяти)
# print(d2)

# d = {"x1": 3, "x2": 7, "x3": 5}  # создали словарь
# print(d["x1"])  # обращение к элементу по ключу
# value = d.get('x1')  # .get() метод - обращение к элементу по словарю
# print(value)
# value = d.get('x9')  # при обращении к несуществующему элементу выводит None
# # value = d.get('x9', "Такого ключа не существует") # если ключ есть, получаем значение ключа, если нет - запись "..."

# d = {"x1": 3, "x2": 7, "x3": 5}  # создали словарь
# print(d)
# item = d.pop('x1')  # .pop() метод - удаляет элемент по ключу
# print(item)  # в переменной остается значение
# print(d)
# # item = d.pop('x9', 0)  # обращение к несуществующему элементу, возвращает второе значение
# print(item)

# d = {"x1": 3, "x2": 7, "x3": 5}  # создали словарь
# print(d)
# item2 = d.popitem()  # .popitem() метод - удаляет последний элемент (ключ и значение)
# print(item2)
# print(d)

# d = {"x1": 3, "x2": 7, "x3": 5} # создали словарь
# print(d)
# d.clear()  # удаляет весь словарь
# print(d)  # возвращает пустые фигурные скобки (пустой словарь)


# d = {"x1": 3, "x2": 7, "x3": 5}  # создали словарь
# print(d)
# # item = d.setdefault("x1")  # .setdefault() метод - возвращает значение указанного ключа
# item = d.setdefault("x9", 10)  # если ключа нет, создает ключ со значением None, или указанным в "..." значением
# print(item)
# print(d)

# d = {"x1": 3, "x2": 7, "x3": 5}  # создали словарь
# print(d)
# a = {"one": 1, "two": 2}
# d.update(a)  # .update() метод - добавляет элементы в первый словарь "d" из второго словаря "a", если появляются
# # одинаковые ключи, значение берется из второго словаря
# print(d)

# Объединение двух словарей в третий словарь
# x = {'a': 1, 'b': 2} # создали словарь
# y = {'b': 3, 'с': 4} # создали словарь
# z = x.copy()  # скопировали словарь "x" в переменную "z", получили словарь "z"
# print(z)
# z.update(y)  # добавили в словарь "z" элементы словаря "y", получили словарь "z" состоящий из словарей "x" и "y"
# print(z)

# x = {'a': 1, 'b': 2}  # создали словарь
# y = {'b': 3, 'c': 4}  # создали словарь
# z = x | y  # объединили два словаря

# d = dict.fromkeys(['a', 'b', 'c'], 100)  # .fromkeys() метод - создали словарь из ключей и дали одно значение всем эл
# print(d)

# .items(), .keys(), .values(), update() -  наиболее используемые методы со словарями

# Задача. Дан словарь {"name": "Kelly", "age": 25, "salary": 8000, "city": "New Yrk"}. Создать новый словарь, который
# будет содержать только имя и зарплату сотрудника, а затем удалить эти значения из исходного словаря.

# d = {"name": "Kelly", "age": 25, "salary": 8000, "city": "New Yrk"}  # создали исходный словарь
# print(d)
# d2 = dict()  # создали пустой словарь
# d2["name"] = d.pop("name")  # в исходном словаре удалили ключ["name"], и записали его со значением в новый словарь
# d2["salary"] = d.pop("salary")  # в исходном словаре удалили ключ["salary"] и записали его со значением в новый слов
# print(d)
# print(d2)

# Задача. Дан словарь {"name": "Kelly", "age": 25, "salary": 8000, "city": "New Yrk"}. Переименовать ключ 'city' в
# 'location'

# d = {"name": "Kelly", "age": 25, "salary": 8000, "city": "New Yrk"}  # создали исходный словарь
# print(d)
# d['location'] = d.pop('city')  # создали новый ключ, при этом удалив старый, сохранив значение
# print(d)

# Вложенные элементы в словаре -------------------------
# d = {  # создали словарь с вложенными элементами
#     'first': {
#         1: "one",
#         2: "two",
#         3: "three"
#     },
#     'second': {
#         4: 'four',
#         5: 'five'
#     }
# }
# print(d)
# # Доступ к уровням вложенности, приведение к читабельному виду
#
# for x in d:  # проходим ао словарю, в переменную "x" попадает ключ
#     print(x, ":")  # вывели ключи первого уровня вложенности
#     for y in d[x]:  # проходим по значению ключей первого уровня вложенности
#         print('\t', y, ":", d[x][y])  # вывели ключи, и значения вложенных элементов

# Меняем ключи и значение -------------------------------------
# d = {"один": 1, "два": 2, "три": 3, "четыре": 4}  # создали словарь
# print(d)
# d2 = {value: key for key, value in d.items()}  # сгенерировали словарь, и поменяли местами значения и ключи
# print(d2)

# Задача. Из исходного словаря {"один": 1, "два": 2, "три": 3, "четыре": 4} выведете только два первых ключа и значение

# d = {"один": 1, "два": 2, "три": 3, "четыре": 4}  # создали словарь
# print(d)
# d2 = {key: value for key, value in d.items() if value <= 2}  # сгенерировали словарь,
# print(d2)

# Задача. Преобразовать список ["one",1,2,3,"two",10,20,"three",15,36,60,"four",-20] в словарь, так,
# чтобы строковые значения были ключами, а числовые - значениями

# a = ["one", 1, 2, 3, "two", 10, 20, "three", 15, 36, 60, "four", -20]  # создали список
# d = dict()  # создали пустой словарь
# s = 0
# for i in a:  # проходим по списку
#     if type(i) == str:  # если элемент явл-я  типом данных  str/// {'one': [], 'two': [], 'three': [], 'four': []}
#         d[i] = []  # обращаемся к пустому словарю, и помещаем в него пустой список d["one"] = []
#         s = i  # сохраняем в переменную ключ
#     else:
#         d[s].append(i)  # добавили в значение элементы
# print(d)


# -----------------------Урок № 13 ----------------------------------------------------------------------------------

# Функция zip() используется для совмещения двух и более списков в один. Она возвращает итератор кортежей,
# где i-ый кортеж содержит i-ый элемент из каждого из переданных списков.
# Также функция zip() может быть использована для «расстегивания» списка кортежей обратно в отдельные списки.

# one = [1, 2, 3]  # создали список
# two = ["one", "two", "three"]  # создали список
# three = [2.5, 4.6, 8.9]
#
# d = dict(zip(one, two))  # zip() - из двух списков создали один словарь, ключ и значение можно менять местами
# print(d)  # {1: 'one', 2: 'two', 3: 'three'}
#
# lst = zip(one, two)
# print(lst)  # выводит адрес объекта в памяти <zip object at 0x0000015209BFCE40>
#
# lst = list(zip(one, two))  # преобразовали тип данных -  list(zip())
# print(lst)  # получили список с кортежами

# one = [1, 2, 3]  # создали список
# two = ["one", "two", "three"]  # создали список
# three = [2.5, 4.6, 8.9]  # создали список
# lst = list(zip(one, two, three))  # преобразовали тип данных -  list(zip())
# print(lst)  # получили список с тремя кортежами

# one = [1, 2, 3]  # создали список
# two = ["one", "two", "three"]  # создали список
# three = [2.5, 4.6, 8.9]  # создали список
#
# f = {k: v for k, v in zip(one, two)}  # из списков создали словарь с помощью zip(), кл и знач можно менять местами
# print(f)

# one = [1, 2, 3, 4, 5, 6, 7, 8, 9]  # создали список
# two = ["one", "two", "three"]  # создали список
# d = dict(zip(one, two))  # создали словарь ( берется только с наименьшим кол - вом элементов)
# print(d)

# # Задача. Вывести данные из двух словарей в одном цикле -------
# one = {"name": "Igor", "surname": "Doe", "job": "Consultant"}  # создали словарь
# two = {"name": "Irina", "surname": "Smith", "job": "Manager"}  # создали словарь

# for k, v in one.items():  # проходим по первому словарю
#     print(k, "->", v)
#
# for k, v in zip(one.items(), two.items()):  # проходим по словарям zip()/,вернули элементы в виде кортежа .items()
#     print(k, "->", v)

# for (k1, v1), (k2, v2) in zip(one.items(), two.items()):  # распаковали два словаря (ключ и значение взяли в скобки)
#     print(k1, "->", v1)
#     print(k2, "->", v2)
# ------------------------------------------

# В Python операторы * и ** используются, чтобы упаковывать и распаковывать итерабельные объекты и словари.---------
# ** - исп-ся только при работе со словарем, при добавлении в аргумент функции - возвращает словарь
# * - исп-ся при работе с другими типами данных, у которых нет ключей и значений,
# * - при добавлении в аргумент функции - возвращает кортеж
# Задача. Разложить список с кортежами на элементы
# lst = [(1, 'one'), (2, 'two'), (3, 'three')] # создали список с кортежами
# print(lst)
# a, b = zip(*lst)  # "*" - оператор, получили два кортежа с числами и строками
# print(a)  # (1, 2, 3)
# print(b)  # ('one', 'two', 'three')

# Задача. Из двух словарей сделать один словарь
# a = {"one": 1, "two": 2, "three": 5}  # создали словарь
# b = {"three": 3, "four": 4}  # создали словарь
# print({**a, **b})  # "**" - содержимое двух словарей -> в один словарь {'one': 1, 'two': 2, 'three': 3, 'four': 4}
#
# for k, v in {**a, **b}.items():  # распаковали словарь, вывели ключи и значения, одинаковые ключи -> в один элемент
#     print(k, "->", v)

# ----------------------------------

# data = [5, 7, 9, 4, 1, 3, 5, 8, 6, 4]  # создали список
# j = 1
# for i in data:
#     print(j, ") ", i, sep="")  # пронумеровали значения при выводе
#     j += 1

# data = [5, 7, 9, 4, 1, 3, 5, 8, 6, 4]  # создали список
# for j, i in enumerate(data, 1):  # enumerate()- функция, нумерует значения
#     print(j, ") ", i, sep="")

# data = ["red", "green", "blue"]   # создали список
# for num, color in enumerate(data, 1):   # enumerate()- функция, нумерует значения
#     print(num, ") ", color, sep="")

# a = [1,2,3]
# b = [a,4,5,6]
# print(b) # вывели вложенный список  [[1, 2, 3], 4, 5, 6]
#
# a = [1, 2, 3]
# b = [*a, 4, 5, 6]  # "*" - убрали вложенность [1, 2, 3, 4, 5, 6]
# print(b)  # вывели вложенный список

# def func(*args):  # "*" - с помощью "*" можно указать больше одного аргумента в функции
#     return args
#
#
# print(func(5))
# print(func(5, 6, 7, "abc"))  # "*" - с помощью "*" можно указать больше одного аргумента в функции

# def summa(*args):  # "*" - позволяет передать в функцию любое кол-во параметров
#     res = 0
#     for i in args:
#         res += i
#     return res
#
#
# print(summa(1, 4, 5, 6, 4, 6, 7, 6, 5, 4, 5, 6, 7, ))  # сумма элементов

# Задача. Напишите функцию, принимает произвольное кол-во аргументов, и возвращает словарь, в котором каждый
# элемент списка является и ключом и значением

# def to_dict(*di):  # 1 вариант решения
#     #    dictionary = {}  # создали пустой словарь
#     #    for i in di:  # проходим по списку
#     #        dictionary.update({i: i})  # добавляем в пустой словарь элементы
#     #    return dictionary  # вернули заполненный словарь
#
#     # 2 вариант решения
#     #  return dict(zip(di, di))
#
#     # 3 вариант решения
#     return {i: i for i in di}
#
#
# print(to_dict(1, 2, 3, 4))
# print(to_dict("grey", (2, 17), 3, 11, -4))

# Задача. Написать функцию - принимает произвольное число чисел, вычисляет их среднее арифм и возвращает
# только те числа, которые меньше полученного средне арифм

# def ch(*args):  # создали функцию, принимающую любое кол-во аргументов
#     average = sum(args) / len(args)  # нашли среднее арифметическое
#     print(average)  # вывели ср арифм
#     res = []  # создали пустой список
#     for num in args:  # прошли циклом по значениям
#         if num < average:  # если значение меньше ср арифм
#             res.append(num)  # добавляем значение в список
#     return res
#
#
# print(ch(1, 2, 3, 4, 5, 6, 7, 8, 9))  # вернули результат работы функции
# print(ch(3, 6, 1, 9, 5,))  # вернули результат работы функции
# -------------------------------------------

# def func(a, *args):  # создали функцию с двумя аргументами, аргумент с "*" можно не указывать в вызове
#     return a, args
#
#
# print(func(5))  # (5, ()) аргумент с "*" можно не указывать в вызове
# print(func(5, 9, 8, 7, 6))  # (5, (9, 8, 7, 6))

# Задача. Распечатать оценки студента

# def print_scores(student, *scores):  # создали функцию принимающую студента и любое кол-во оценок
#     print("Name:", student)
#     for score in scores:  # проходим в цикле по оценкам
#         print(score, end=" ")
#     print()
#
#
# print_scores("Roman", 5, 4, 3, 5, 4, 5, 5, 3, 5)  # вызвали функцию
# print_scores("Nikita", 5, 4, 3, 5)  # вызвали функцию
# -------------------------------

# def func(**kwargs):  # "**" - возвращает словарь из введенных значений
#     return kwargs
#
#
# print(func(a=1, b=2, c=3))  # {'a': 1, 'b': 2, 'c': 3}
# print(func())  # если не вводить значение, вернется пустой словарь {}
# print(func(name="Python"))  # {'name': 'Python'}


# def intro(**kwargs):  # создали функцию с двумя аргументами
#     for k, v in kwargs.items():  # создали две переменные (k, v), проходим циклом
#         print(k, "is", v)  # в "k" ключи, в "v" - значения
#     print()
#
#
# (intro(name="Irina", surname="Sharma", age=22))
# intro(name="Igor", surname="Wood", email="igor@gmal.com", age=26, phone=987654321)


# сочетание принимаемых аргументов между собой ------------------------

# def func(a, b, *args):  # позиционных аргументов(до "*" может быть сколько угодно, а аргументов с "*" - только один
#     return a, b, args
#
#
# print(func(1, 2, 3, 4, 5,))  # (1, 2, (3, 4, 5)) аргумент с "*" - выводиться как кортеж, внутри кортежа
# ---------------------------------------------

# def func(a, b, *args, **kwargs):  # добавили аргумент с двумя "**"
#     return a, b, args, kwargs
#
#
# print(func(1, 2, 3, 4, 5, aa=1, bb=2, cc=3))  # (1, 2, (3, 4, 5), {'aa': 1, 'bb': 2, 'cc': 3}) аргумент с двумя "**"
# # - выводиться как словарь
# --------------------------------------------------

# def func(a, b, *args, dd=5, **kwargs):  # добавили аргумент "dd=5" между двумя аргументами с "*" и "**"
#     return a, b, args, kwargs, dd
#
#
# print(func(1, 2, 3, 4, 5, aa=1, bb=2, cc=3))  # (1, 2, (3, 4, 5), {'aa': 1, 'bb': 2, 'cc': 3}, 5) аргумент "dd=5"
# # - выводиться в самом конце
# ---------------------------------------------------------------

# Задача. Создайте функцию, которая принимает неограниченное количество параметров "ключ:значение" и обновляет
# созданный словарь my_dict, состоящий всего из одного элемента "one" со значением "first".
# Словарь должен обновляться при каждом вызове функции

# def db(**kwargs):  # создали функцию
#     my_dict.update(**kwargs)  # .update(**kwargs) - добавили в созданный словарь указанные элементы
#
#
# my_dict = {"one": "first"}  # создали словарь с одним элементом
# db(k1=22, k2=31, k3=11, k4=91)  # вызвали функцию и передали параметры
# db(name="Bob", age=31, wight=61, eyes_color="grey")  # вызвали функцию и передали параметры
# print(my_dict)

# ----------------------------------------
# name = "Tom"  # глобальная переменная
# surname = ""
#
#
# def hi():  # создали функцию
#     global name, surname  # "global" локальную переменную сделали глобальной
#     name = "Sam"  # локальная переменная
#     surname = "Johnson"  # локальная переменная
#     print("Hello", name, surname)
#
#
# def bye():  # создали функцию
#     print("Good bye", name)
#
#
# print(name)
# hi()  # вызвали функцию
# bye()  # вызвали функцию
# print(name)
# print(surname)
# -------------------------------------------------

# def func(a):  # создали функцию
#     x = 2  # объявили переменную (локальная)
#
#     def inner():  # создали еще одну функцию
#         print("x:", x)
#         return a + x  # сложили аргумент функции и переменную
#
#     return inner()  # вернули функцию
#
#
# print(func(3))  # 5


# ----------------------- Урок № 14 ----------------------------------------------------------------------------------

# Области видимости функции. Вложенные функции -------------------------------------

# Sum = "Hello"  # создали переменную, область видимости built-in, приоритет самый низкий
#
# print(Sum)  # вывели переменную
#
# lst = [1, 2, 3, 4, 5, 6, 4]  # создали список
# print(sum(lst))  # вывели результат работы функции, сумма всех элементов списка


# def outer(who):  # принимаемый аргумент наружной функции виден во вложенной функции
#     def inner():  # создали пустую функцию "вложенная"
#         print("Hello,", who)
#
#     inner()  # вызываем функцию в зоне ее видимости (def)
#
#
# outer("World!")


# def fun1():   # область видимости - Enclosed(E)
#     a = 6  # 2
#
#     def fun2(b):  # b = 4, область видимости Local(L) (локальная)
#         a = 4 # 5  # a = 6
#         print(a + b)  # 6  # a + b = 8 (10)
#
#     print("a:", a)  # 3
#     fun2(4)  # 4
#
#
# fun1()  # 1 # сначала отрабатывает вызов функции, затем - сверху вниз

# x = 25
# t = 0
#
#
# def fn():
#     global t
#     a = 30  # 35
#
#     def inner():
#         nonlocal a  # nonlocal - вывели переменную "a" в область видимости на уровень выше
#         a = 35
#         # print(a)
#
#     inner()
#     t = a  # 35
#
#
# fn()
# q = x + t  # 25 + 35
# print(q)  # 60


# x = 5


# def fn1():
#     x = 25  # 55
#
#     def fn2():
#         x = 33  # 55
#
#         def fn3():
#             nonlocal x  # nonlocal - перезаписывает переменную на уровень выше, но только в функции
#             x = 55
#
#         fn3()
#         print("fn2.x =", x)  # 33  55
#
#     fn2()
#     print("fn1.x =", x)  # 25  55
#
#
# fn1()
#
# def outer(a1, b1, a2, b2):
#     a = 0  # 1
#     b = 0  # 7
#
#     def inner():
#         nonlocal a, b
#         a = a1 + a2
#         b = b1 + b2
#         # print("a:", a)
#         # print("b:", b)
#
#     inner()
#     return [a, b]
#
#
# print(outer(2, 3, -1, 4))  # [1, 7]


# Замыкание функции - это когда функция возвращает другую функцию без ее вызова __________________
#
# def outer(n):  # 5
#     def inner(x):  # 10
#         return n + x
#
#     return inner
#
#
# out1 = outer(5)
# print(out1(10))
#
# out2 = outer(6)
# print(out2(4))
#
# print(outer(5)(10))


# def func(a):
#     return a + 2
#
#
# var = func(5)
# print(var)


# def func1():
#     a = 1
#     b = "line"
#     c = [1, 2, 3]
#
#     def func2():
#         nonlocal a, b
#         c.append(4)
#         a = a + 1
#         b = b + "_new"
#         return a, b, c
#
#     return func2
#
#
# func = func1()
# print(func())


# Задача. Напишите функцию, ведущую подсчет количества посещений указанного города.
# Функция должна принимать в качестве аргумента название города и возвращать некоторою внутреннюю функцию, которая
# каждый раз при ее вызове будет увеличивать счетчик посещений на 1. При решении задачи используете нелокальную
# область видимости.

# def func(city):  # функция принимает какой-то город
#     count = 0  # переменная для подсчета
#
#     def inner():  # вложенная функция выводит город из наружней функции
#         nonlocal count
#         count += 1
#         print(city, count)
#
#     return inner  # возвращаем из наружней функции вложенную без вызова (без круглых скобок)
#
#
# res1 = func("Москва")  # вызываем наружную функцию и передаем город
# res1()  # повторно вызвали
# res1()  # повторно вызвали
#
# res2 = func("Сочи")  # создали еще одну переменную для другого города, и так же вызвали наружную функцию
# res2()  # повторно вызвали
# res2()  # повторно вызвали
# res2()  # повторно вызвали
# res2()  # повторно вызвали
# res2()  # повторно вызвали
#
# res1()  # повторно вызвали
# res1()  # повторно вызвали
# res1()  # повторно вызвали
# res1()  # повторно вызвали


# lambda - функция (выражение) ------------------------------------------------------------
# lambda - функция (выражение) - функция записанная в одну строку

# def func(x, y):
#     return x + y
#
#
# print(func(2, 3))

# print((lambda x, y: x + y)(2, 3))  # lambda выражение
# print((lambda x, y: x + y)(12, 3))   # lambda выражение

# variable = lambda x, y: x + y  # lambda выражение, нельзя присвоить имя
#
# print(variable(2, 3))

# Задача. Создать лямбда-выражение, которое находит сумму квадратов двух чисел: 2, 5
# print((lambda x, y: x ** 2 + y ** 2)(2, 5))

# print((lambda a, b, c: a + b + c)(10, 20, 30))
# print((lambda a, b, c=3: a + b + c)(10, 20))
# print((lambda a, b=2, c=3: a + b + c)(10))
# print((lambda a=1, b=2, c=3: a + b + c)())

# print((lambda *args: sum(args))(1, 2, 3, 4, 5, 6))  # * - сумма кортежа
# print((lambda *args: args)("a", "b", "c"))

#
# c = (  # создали кортеж, элементами кортежа явл-ся  lambda выражения
#     lambda x: x * 2,
#     lambda x: x * 3,
#     lambda x: x * 4,
# )
#
# for t in c:  # проходим циклом по кортежу
#     print(t("abc_"))  # передаем принимаемый аргумент в "x"

#
# def outer(n):
#     def inner(x):
#         return n + x
#
#     return inner
#
#
# f = outer(5)
# print(f(10))

# def outer1(n): #  записали функцию выше в две строки с помощью lambda выражения
#     return lambda x: n + x
#
#
# f1 = outer1(5)
# print(f1(10))
#
# outer2 = lambda n: lambda x: n + x  # сделали то выше без функции, только с помощью lambda выражения
#
# f2 = outer2(5)
# print(f2(10))

# print((lambda n: lambda x: n + x)(5)(10)) # сделали то выше без функции, только с помощью lambda выражения с выводом

# Создать лямбда-выражение для вычисления суммы трех чисел, с использованием вложенных лямбда-выражений
# print("sum3", (lambda a: lambda b: lambda c: a + b + c)(2)(4)(6))

# print((lambda n: lambda x: lambda y: n+x+y)(int(input("Введите 1 число: ")))(int(input("Введите 2 число: ")))
# (int(input("Введите 3 число: "))))


# сортировка значений по возрастанию
# def func(i):
#     return i[1]

#
# d = {"b": 15, "a": 7, "c": 3}  # создали словарь
# print(d)
# lst = list(d.items())  # из словаря сделали список кортежей
# print(lst)
# lst.sort(key=lambda i: i[1])  # в именованный параметр "key" передали параметры, отсортировали значения по возрастанию
# # lst.sort(key=func)
# print(lst)
# print(dict(lst))  # преобразовали список в словарь


# ----------------------- Урок № 15 ----------------------------------------------------------------------------------

# Задача. Отсортировать список

# players = [  # создали список из словарей
#     {'name': 'Антон', 'last_name': 'Бирюков', 'rating': 9},
#     {'name': 'Алексей', 'last_name': 'Бодня', 'rating': 10},
#     {'name': 'Федор', 'last_name': 'Сидоров', 'rating': 4},
#     {'name': 'Михаил', 'last_name': 'Семенов', 'rating': 6},
# ]
#
# res1 = sorted(players, key=lambda item: item['last_name'])  # sorted()-отсортированные элементы сохраняет в нов список
# print(res1)  # вывод, сортировка по ключу, (по фамилии)
# res2 = sorted(players, key=lambda item: item['rating'])  # отсортировали по рейтингу (по ключу 'rating')
# print(res2)
# res3 = sorted(players, reverse=True, key=lambda item: item['rating'])  # сортировка рейтинга от большего к меньшему
# print(res3)


# a = [lambda x, y: x + y, lambda x, y: x - y, lambda x, y: x * y]  # сохранили в переменную список лямбда-выражений
# b = a[0](5, 3)  # по индексу выбираем действие над введенными параметрами
# print(b)


# d = {  # создали словарь
#     1: lambda: print("Понедельник"),
#     2: lambda: print("Вторник"),
#     3: lambda: print("Среда"),
#     4: lambda: print("Четверг"),
# }
#
# d[3]()  # обращение к элементу по индексу (ключу)

# print((lambda a, b: a if a > b else b)(5, 13))  # условие if else в лямбда-выражении (какое число больше)


# print((lambda a, b, c: a if (a < b) and ((b < c) or (b > c)) else b if b < c else c)(12, 15, 6))


# print((lambda a, b, c: a if (a < b) and (a < c) else b if (b < c) and (b < a) else c if (c < a) and (
#             c < b) else "Ну тут уже всё:)")(22, 35, 16))
# print((lambda a, b, c: a if (a < b) and (a < c) else b if (b < c) and (b < a) else c)(12, 36, 15))

#
# print((lambda a, b, c: a if min(a, b, c) == a else b if min(a, b, c) == b else c if min(a, b,

#  c) == c else "Несколько равных")(
#     11, 2, 111))
#
# print((lambda *args: min(args))(12, 5, 6))  # нахождение минимального числа
# print((lambda *args: sorted(args)[0])(2, 5, 6))  # нахождение минимального числа
# print((lambda *args: sorted(args)[-1])(2, 5, 6))  # нахождение максимального числа

# Циклы, записанные в одну строку --------------------------

# map(func, iterable), filter(func, iterable)  # 1 параметр-функция, 2 параметр-итерируемый объект

# Функция map() - отрабатывает как цикл, который проходит по каждому элементу итерируемого объекта------------

# 1 вариант
# def mult(t):  # создали функцию
#     return t * 2  # то что функция возвращает (действие)
#
#
# lst = [2, 8, 12, -5, -10]  # создали список (итерируемый объект)
#
# lt = list(map(mult, lst)) # создали переменную,в ней функция и список(итерируемый объект¿)
# print(lt)
#
# # 2 вариант (лямбда-выражение)
# lt1 = list(map(lambda t: t * 2, lst))
# print(lt1)
#
# # 3 вариант
# print(list(map(lambda t: t * 2, [2, 8, 12, -5, -10])))

# lst = ['1', '2', '3', '4', '5'] # создали список чисел в виде строковых значений
# print(lst)
# print(list(map(lambda x: int(x), lst))) # функцией map() прошли по списку, как циклом,  преобразовали в int

# print([int(i) for i in lst]) # преобразование типа данных
# print(list(map(int, lst)))   # преобразование типа данных

# st = ['a', 'b', 'c', 'd', 'e']
# num = [1, 2, 3, 4, 5]
# print(list(map(lambda x, y: {x: y}, st, num)))

# st = [9, 2, 7, 6, 5]
# num = [1, 2, 3, 4, 5]
# print(list(map(lambda x, y: x + y, st, num)))

# t = ('abcd', 'abc', 'cdefg', 'def', 'gth', '', False)  # создали кортеж
#
# t2 = list(filter(lambda s: len(s) == 3, t))
# # t2 = list(filter(lambda s: s, t))
# print(t2)

# Задача. Дан список студентов, нужно отфильтровать тех, у кого больше 75 баллов
# b = [66, 90, 68, 59, 76, 60, 88, 74, 81, 65] # список
# print(list(filter(lambda s: s > 75, b)))

# Задача. Сгенерировать список из 10 элементов случайным образом. Из полученного списка выбрать только те числа,
# которые находятся в диапазоне от 10 до 20 (включительно)
# from random import randint
#
# arr = [randint(1, 40) for i in range(10)]
# print(arr)
# # print(list(filter(lambda a: (a >= 10) and a <= 20, arr)))
# print(list(filter(lambda a: 10 <= a <= 20, arr)))

# Совмещение map() и filter()-----------------
# Вывести на экран квадраты нечетных чисел от 1 до 10
# print(list(map(lambda x: x ** 2, filter(lambda x: x % 2, range(1, 10)))))
# print([x ** 2 for x in range(1, 10) if x % 2])


# Декораторы - это функции принимающие другую функцию в качестве аргумента, добавляющие функциональность и возвращающие
# функцию с измененным поведением --------------------------------------------------
#
# def hello():
#     return 'Hello, I am func "hello"'  # 3
#
#
# def super_func(func):  # (def hello(): return 'Hello, I am func "hello"')
#     print('Hello, I am func "super_func"')  # 2
#     print(func())  # 4
#
#
# super_func(hello)  # 1

#
# def hello():
#     return 'Hello, I am func "hello"'
#
#
# test = hello
# print(id(test))
# print(id(hello))
# print(test())

# ---------------------------------------------------------------
# def my_decorator(func):  # декорирующая функция
#     def inner():
#         print('Code before')
#         func()
#         print('Code after')
#
#     return inner
#
#
# def func_test():   # декорируемая функция
#     print('Hello, I am func "func_test"')
#
#
# test = my_decorator(func_test)
# test()
# ----------------------------------------------------------

# def my_decorator(func):  # декорирующая функция
#     def inner():
#         print('*' * 40)
#         func()
#         print('-' * 40)
#
#     return inner
#
#
# @my_decorator  # декоратор
# def func_test():  # декорируемая функция
#     print('Hello, I am func "func_test"')
#
#
# @my_decorator
# def hello():
#     print('Hello, I am func "hello"')
#
#
# func_test()
# hello()
#
# m = "Hello"
# print(m[::-1])
